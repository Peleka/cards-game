{"version":3,"sources":["n1-main/m1-ui/components/Error404.tsx","n1-main/m1-ui/superComponents/c2-SuperButton/SuperButton.tsx","n1-main/m1-ui/superComponents/c3-SuperCheckbox/SuperCheckbox.tsx","n1-main/m1-ui/superComponents/c1-SuperInputText/SuperInputText.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/app-reducer.ts","n1-main/m2-bll/auth-reducer.ts","n1-main/m1-ui/components/Login/Login.tsx","n1-main/m1-ui/components/Profile.tsx","n1-main/m2-bll/registration-reducer.ts","n1-main/m1-ui/components/Registration/Register.tsx","n1-main/m2-bll/setNewPassword-reducer.ts","n1-main/m1-ui/components/NewPassword.tsx","n1-main/m2-bll/recoverPassword-reducer.ts","n1-main/m1-ui/components/ForgotPassword.tsx","n1-main/m2-bll/packs-reducer.ts","n1-main/m1-ui/components/Packs/Pack/Pack.tsx","n1-main/m1-ui/superComponents/c8-SuperDoubleRange/SuperDoubleRange.tsx","n1-main/m1-ui/components/Packs/Packs.tsx","n1-main/m1-ui/components/Cards/Card/Card.tsx","n1-main/m2-bll/cards-reducer.ts","n1-main/m1-ui/components/Cards/Cards.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/superComponents/Loader/Loader.tsx","n1-main/Main.tsx","App.tsx","reportWebVitals.ts","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/common/styles.module.css","n1-main/m1-ui/components/Packs/Pack/Pack.module.css","n1-main/m1-ui/components/Cards/Card/Card.module.css","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/components/Packs/Packs.module.css","n1-main/m1-ui/superComponents/c1-SuperInputText/SuperInputText.module.css","n1-main/m1-ui/superComponents/c2-SuperButton/SuperButton.module.css","n1-main/m1-ui/superComponents/c3-SuperCheckbox/SuperCheckbox.module.css","n1-main/m1-ui/components/Login/Login.module.css","n1-main/m1-ui/components/Cards/Cards.module.css","n1-main/m1-ui/superComponents/Loader/Loader.module.css"],"names":["Error404","SuperButton","red","className","restProps","finalClassName","s","default","SuperCheckbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","e","currentTarget","checked","SuperInputText","onChangeText","onKeyPress","onEnter","error","finalSpanClassName","superInput","errorInput","value","key","instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","delete","registerAPI","recoverPasswordAPI","message","resetPasswordToken","packsAPI","pageCount","currentPage","minCardsCount","maxCardsCount","userId","get","data","cardsPack","id","put","cardsAPI","cardsPack_id","card","updateCardData","_id","initialState","status","isInitialized","setAppStatusAC","setIsInitializedAC","userData","avatar","created","isAdmin","name","publicCardPacksCount","token","tokenDeathTime","updated","verified","__v","isLoggedIn","authError","setIsLoggedInAC","logoutTC","dispatch","then","Login","useDispatch","useSelector","state","auth","authErrorMessage","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","res","catch","response","errorMessage","loginTC","resetForm","to","bgr","handleSubmit","form","placeholder","touched","getFieldProps","style","Profile","isRegistered","Register","register","confirmedPassword","length","alert","registerTC","isNewPassword","NewPassword","newPasswordSet","setNewPassword","useParams","confirmPassword","recoveredPassword","ForgotPassword","forgotPassword","recoverPasswordTC","Message","props","cardPacks","packId","totalPacksCount","pageSize","setUserIdAC","getPacksTC","getState","packs","packName","totalPacks","cardPacksTotalCount","console","log","Pack","updateTime","Date","toLocaleDateString","packItem","packSpecification","user_name","cardsCount","onClick","delPack","updatePack","SuperDoubleRange","onChangeRange","Slider","margin","height","valueLabelDisplay","aria-labelledby","min","max","Packs","useCallback","delPackTC","updatePackTC","showAllPacks","pages","pagesCount","Math","ceil","i","push","useEffect","mappedPacks","map","p","st","titleParent","filter","paginator","Pagination","count","boundaryCount","defaultPage","page","pageNumber","onPageChangedHandler","packContents","Card","cardItem","cardSpecification","question","answer","grade","delCard","updateCard","cards","getCardsTC","Cards","packID","delCardTC","err","updateCardTC","mappedCards","c","cardContents","PATH","Routes","path","exact","render","Header","wrapper","activeClassName","active","Loader","ldsCircle","Main","app","finally","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.57abe92c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const  Error404 = () => {\r\n    return (\r\n        <div>\r\n            <div>404</div>\r\n            <div>Page not found!</div>\r\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\r\n        </div>\r\n    )\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string | null\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    // const finalInputClassName = `${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n    const finalInputClassName = `${s.superInput} ${error ? s.errorInput : ''} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import axios from \"axios\";\r\nimport {UpdatePacksRequestDataType} from \"../m2-bll/packs-reducer\";\r\n\r\nexport const instance = axios.create(\r\n    {\r\n        baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n        withCredentials: true,\r\n    })\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me')\r\n    },\r\n    me() {\r\n        return instance.post('auth/me')\r\n    },\r\n}\r\n\r\nexport const registerAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post('/auth/register', {email, password})\r\n    }\r\n}\r\n\r\nexport const recoverPasswordAPI = {\r\n    recoverPassword(email: string, message: string) {\r\n        return instance.post('/auth/forgot', {email, message})\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post('/auth/set-new-password', {password, resetPasswordToken})\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(pageCount: number,currentPage: number,packName: string = '',minCardsCount: number,maxCardsCount: number,userId: string) {\r\n        return instance\r\n            .get(`/cards/pack?pageCount=${pageCount}&page=${currentPage}&min=${minCardsCount}&max=${maxCardsCount}&user_id=${userId}`)\r\n    },\r\n    addPack(data: AddPackRequestDataType) {\r\n        return instance.post('/cards/pack', {cardsPack: data})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`/cards/pack?id=${id}`)\r\n    },\r\n    updatePack(data: UpdatePacksRequestDataType) {\r\n        return instance.put('/cards/pack', {cardsPack: data})\r\n    },\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(cardsPack_id: string) {\r\n        return instance.get(`/cards/card?cardsPack_id=${cardsPack_id}`)\r\n    },\r\n    addCard(data: CreateCardRequestDataType) {\r\n        return instance.post('/cards/card', {card: {cardsPack_id: data.cardsPack_id}})\r\n    },\r\n    deleteCard(cardsPack_id: string) {\r\n        return instance.delete(`/cards/card?id=${cardsPack_id}`)\r\n    },\r\n    updateCard(updateCardData: updateCardDataType) {\r\n        return instance.put('cards/card', {card: {_id: updateCardData._id}})\r\n    }\r\n}\r\n\r\n//types\r\nexport type updateCardDataType = {\r\n    _id: string,\r\n    question?: string,\r\n    answer?: string\r\n}\r\n\r\nexport type CreateCardRequestDataType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    type?: string\r\n}\r\n\r\nexport type AddPackRequestDataType = {\r\n    name?: string\r\n    private?: boolean\r\n}","import {AppThunkType} from \"./store\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\nimport {authAPI} from \"../m3-dal/api\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    status\r\n} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({\r\n    type: 'APP/SET-IS-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\n//thunk\r\nexport const setIsInitializedTC = (): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.me()\r\n        .then((res) => {\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setIsLoggedInAC(true,res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n//types\r\nexport type AppActionsType = ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../m3-dal/api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    userData: {\r\n        avatar: '',\r\n        created: '',\r\n        email: '',\r\n        isAdmin: false,\r\n        name: '',\r\n        publicCardPacksCount: 0,\r\n        rememberMe: false,\r\n        token: '',\r\n        tokenDeathTime: 0,\r\n        updated: '',\r\n        verified: false,\r\n        __v: 0,\r\n        _id: '',\r\n    } || null,\r\n    isLoggedIn: false,\r\n    authError: '',\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, userData: action.userData, isLoggedIn: action.value}\r\n        case 'login/SET-IS-LOGGED-OUT':\r\n            return {...state, isLoggedIn: action.value}\r\n        case 'login/SET-AUTH-ERROR':\r\n            return {...state, authError: action.errorMessage}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setIsLoggedInAC = (value: boolean, userData: UserDataResponseType) => ({\r\n    type: 'login/SET-IS-LOGGED-IN', value, userData\r\n} as const)\r\nexport const setIsLoggedOutAC = (value: boolean) => ({\r\n    type: 'login/SET-IS-LOGGED-OUT', value\r\n} as const)\r\n\r\nconst setAuthErrorAC = (errorMessage: string) => ({\r\n    type: 'login/SET-AUTH-ERROR', errorMessage\r\n} as const)\r\n\r\n//thunks\r\nexport const loginTC = (values: UserLoginData) => (dispatch: Dispatch<ActionsType>) => {\r\n\r\n    dispatch(setAppStatusAC('loading'))\r\n\r\n    authAPI.login(values.email, values.password, values.rememberMe)\r\n        .then((res) => {\r\n            dispatch(setIsLoggedInAC(true, res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : e.message\r\n            dispatch(setAuthErrorAC(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n\r\n        })\r\n}\r\n\r\nexport const logoutTC = (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        authAPI.logout().then(() => {\r\n            dispatch(setIsLoggedOutAC(false))\r\n        })\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setIsLoggedOutAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAuthErrorAC>\r\n\r\n\r\nexport type UserLoginData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type UserDataResponseType = {\r\n    avatar: string\r\n    created: string\r\n    email: string\r\n    isAdmin: boolean\r\n    name: string\r\n    publicCardPacksCount: number\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    updated: string\r\n    verified: boolean\r\n    __v: number\r\n    _id: string\r\n}","import React from 'react'\r\nimport s from '../../common/styles.module.css'\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../superComponents/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../../m2-bll/auth-reducer\";\r\nimport {useFormik} from 'formik';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport style from './Login.module.css'\r\n\r\ntype LoginErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n    const authErrorMessage = useSelector((state: AppStoreType) => state.auth.authError)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: LoginErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h2> Login </h2>\r\n\r\n            <form onSubmit={formik.handleSubmit} className={s.form}>\r\n\r\n                <SuperInputText\r\n                    type='email'\r\n                    placeholder='E-mail'\r\n                    error={formik.touched.email ? formik.errors.email : null}\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    error={formik.touched.password ? formik.errors.password : null}\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n\r\n                <br/>\r\n\r\n                <div>\r\n                    <SuperCheckbox {...formik.getFieldProps('rememberMe')}/>\r\n                    Remember me\r\n                </div>\r\n\r\n                <div className={style.authError}>\r\n                    {authErrorMessage}\r\n                </div>\r\n\r\n                <SuperButton type='submit'>\r\n                    Login\r\n                </SuperButton>\r\n            </form>\r\n\r\n            <NavLink to='/forgot-password'>Forgot Password</NavLink> <br/>\r\n            <NavLink to=\"/register\">Sign Up</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../m2-bll/store\";\r\nimport {Login} from \"./Login/Login\";\r\n\r\nexport const  Profile = () => {\r\n\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Login />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Profile\r\n        </div>\r\n    )\r\n}","import {registerAPI} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isRegistered: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registerReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"register/SET-SIGN-UP\":\r\n            return {...state, isRegistered: action.isRegistered}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setSignUpAC = (isRegistered: boolean) => ({\r\n    type: 'register/SET-SIGN-UP',\r\n    isRegistered\r\n} as const)\r\n\r\n//thunks\r\nexport const registerTC = (values: UserLoginData) => {\r\n    return (dispatch: Dispatch<ActionsType>) =>  {\r\n        dispatch(setAppStatusAC('loading'))\r\n        registerAPI.register(values.email, values.password)\r\n            .then(() => {\r\n                dispatch(setSignUpAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                const error = e.response ? e.response.data.error : e.message\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setSignUpAC> | ReturnType<typeof setAppStatusAC>\r\ntype UserLoginData = {\r\n    email: string\r\n    password: string\r\n}","import React from 'react'\r\nimport s from '../../common/styles.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport {registerTC} from \"../../../m2-bll/registration-reducer\";\r\n\r\ntype SignupFormErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmedPassword?: string\r\n}\r\nexport const Register = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector((state: AppStoreType) => state.register.isRegistered)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmedPassword: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: SignupFormErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address.';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be at least 8 symbols'\r\n            }\r\n            if (values.password && !values.confirmedPassword) {\r\n                errors.confirmedPassword = 'Confirm your password'\r\n            } else if (values.password !== values.confirmedPassword) {\r\n                errors.confirmedPassword = 'You entered two different passwords.'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            if (values.password === values.confirmedPassword) {\r\n                dispatch(registerTC(values))\r\n                formik.resetForm()\r\n            }\r\n        },\r\n    })\r\n\r\n    if(isRegistered) {\r\n        return <Redirect to={'./login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h1>it-incubator</h1>\r\n            <h2>Sign In</h2>\r\n            <form onSubmit={formik.handleSubmit} className={s.form}>\r\n\r\n                <SuperInputText\r\n                    type='email'\r\n                    placeholder='Email'\r\n                    error={formik.touched.email ? formik.errors.email : null}\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    error={formik.touched.password ? formik.errors.password : null}\r\n                    {...formik.getFieldProps('password')}\r\n                    //formik.getFieldProps вместо этого:\r\n                    // name='password'\r\n                    // onChange={formik.handleChange}\r\n                    // value={formik.values.password}\r\n                />\r\n\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Confirm your password'\r\n                    error={formik.touched.confirmedPassword ? formik.errors.confirmedPassword : null}\r\n                    {...formik.getFieldProps('confirmedPassword')}\r\n                />\r\n                <div>\r\n                    <NavLink to='/login'><SuperButton> Cancel </SuperButton></NavLink>\r\n                    <SuperButton type={'submit'}> Register </SuperButton>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {setAppStatusAC} from \"./app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {recoverPasswordAPI} from \"../m3-dal/api\";\r\n\r\nconst initialState = {\r\n  isNewPassword: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'setNewPassword/SET-NEW-PASSWORD':\r\n      return {...state, isNewPassword: true}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// AC\r\nconst setNewPasswordAC = () => ({\r\n  type: 'setNewPassword/SET-NEW-PASSWORD'\r\n} as const)\r\n\r\n\r\n// Thunk\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    recoverPasswordAPI.setNewPassword(password, resetPasswordToken)\r\n    .then(() => {\r\n      dispatch(setNewPasswordAC())\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    .catch((e) => {\r\n      const error = e.response ? e.response.data.error : e.message\r\n      alert(error)\r\n    })\r\n  }\r\n}\r\n\r\n// Type\r\ntype ActionsType = ReturnType<typeof setNewPasswordAC> | ReturnType<typeof setAppStatusAC>","import React from 'react'\r\nimport s from '../common/styles.module.css'\r\nimport SuperInputText from \"../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {setNewPasswordTC} from \"../../m2-bll/setNewPassword-reducer\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../m2-bll/store\";\r\n\r\ntype SetNewPassErrorType = {\r\n  password?: string\r\n  confirmPassword?: string\r\n}\r\n\r\nexport const  NewPassword = () => {\r\n  const dispatch = useDispatch()\r\n  const newPasswordSet = useSelector((state: AppStoreType) => state.setNewPassword.isNewPassword)\r\n  const {token} = useParams<{ token: string }>()\r\n\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password: '',\r\n      confirmPassword: ''\r\n    },\r\n    validate: (values) => {\r\n      // debugger\r\n      const errors: SetNewPassErrorType = {};\r\n      if (!values.password) {\r\n        errors.password = 'Password is required'\r\n      } else if (values.password.length < 8) {\r\n        errors.password = 'Password must be at least 8 symbols'\r\n      }\r\n      if (values.password && !values.confirmPassword) {\r\n        errors.confirmPassword = 'Confirm your password'\r\n      } else if (values.password !== values.confirmPassword) {\r\n        errors.confirmPassword = 'You entered two different passwords.'\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      // debugger\r\n      if (values.password === values.confirmPassword) {\r\n        dispatch(setNewPasswordTC(values.confirmPassword, token))\r\n        formik.resetForm()\r\n      }\r\n      // dispatch(setNewPasswordTC(values.password, token))\r\n    },\r\n  });\r\n\r\n  if (newPasswordSet) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.bgr}>\r\n              <h1>it-incubator</h1>\r\n              <h2>Set new password</h2>\r\n              <form onSubmit={formik.handleSubmit} className={s.form}>\r\n                <SuperInputText\r\n                  type='password'\r\n                  placeholder='New password'\r\n                  error={formik.touched.password ? formik.errors.password : null}\r\n                  {...formik.getFieldProps('password')}\r\n                />\r\n                <SuperInputText\r\n                  type='password'\r\n                  placeholder='Confirm your new password'\r\n                  error={formik.touched.confirmPassword ? formik.errors.confirmPassword : null}\r\n                  {...formik.getFieldProps('confirmPassword')}\r\n                />\r\n                <SuperButton type={'submit'}>Set new password</SuperButton>\r\n              </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {recoverPasswordAPI} from \"../m3-dal/api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    recoveredPassword: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoverPasswordReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'recoverPassword/CHANGE-PASSWORD':\r\n            return {...state, recoveredPassword: true}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const recoverPasswordAC = () => ({\r\n    type: 'recoverPassword/CHANGE-PASSWORD'\r\n} as const)\r\n\r\n//thunks\r\nexport const recoverPasswordTC = ( email: string, message: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) =>  {\r\n        dispatch(setAppStatusAC('loading'))\r\n        recoverPasswordAPI.recoverPassword(email, message)\r\n            .then(() => {\r\n                dispatch(recoverPasswordAC())\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                const error = e.response ? e.response.data.error : e.message\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n// types\r\ntype ActionsType = ReturnType<typeof recoverPasswordAC> | ReturnType<typeof setAppStatusAC>","import React from 'react'\r\nimport s from '../common/styles.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {recoverPasswordTC} from \"../../m2-bll/recoverPassword-reducer\";\r\nimport SuperButton from \"../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport SuperInputText from \"../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport {AppStoreType} from '../../m2-bll/store';\r\n\r\nexport type RecoveryFormikErrorType = {\r\n    email?: string\r\n}\r\nexport const ForgotPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const recoveredPassword = useSelector((state: AppStoreType) => state.forgotPassword.recoveredPassword)\r\n\r\n\r\n    const message = `<div style=\"background-color: lime; padding: 15px\">\r\n            password recovery link:\t<a href='https://Peleka.github.io/cards-game/#/new-password/$token$'>link</a>\r\n            </div>`\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: RecoveryFormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\"\r\n            } else if (values.email.length < 11) {\r\n                errors.email = \"Email should be more 10 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(recoverPasswordTC(values.email, message))\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h1>it-incubator</h1>\r\n            <h2>Forgot your password?</h2>\r\n            {!recoveredPassword\r\n                ? <div>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <SuperInputText type='email'\r\n                                        placeholder='Email'\r\n                                        {...formik.getFieldProps('email')}\r\n                        />\r\n                        <SuperButton type={'submit'}>Send instructions</SuperButton>\r\n                    </form>\r\n                </div>\r\n                : <Message email={formik.values.email}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype MessagePropsType = {\r\n    email: string\r\n}\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div>\r\n            <h4>Check your Email</h4>\r\n            <span>\r\n                click the link in the message in your email {props.email}\r\n            </span>\r\n        </div>\r\n    )\r\n}","import {AddPackRequestDataType, packsAPI} from \"../m3-dal/api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {AppThunkType} from \"./store\";\r\n\r\nconst initialState = {\r\n    cardPacks: null as null | PackResponseType[],\r\n    maxCardsCount: 4,\r\n    minCardsCount: 0,\r\n    pageCount: 10,\r\n    packId: '',\r\n    name: '',\r\n    totalPacksCount: 0,\r\n    pageSize: 10,\r\n    currentPage: 1,\r\n    userId: '',\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const packsReducer = (state = initialState, action: PacksActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS/SET-PACKS':\r\n            return {...state, cardPacks: action.data}\r\n        case 'SET-TOTAL-PACKS-COUNT':\r\n            return {...state, totalPacksCount: action.totalPacks}\r\n        case 'SET-CURRENT-PAGE':\r\n            return {...state, currentPage: action.pageNumber}\r\n        case 'PACKS/DEL-PACK':\r\n            return state\r\n        case 'PACKS/UPDATE-PACK':\r\n            return state\r\n        case 'PACKS/SET-USER-ID':\r\n            return {...state, userId: action.userId}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setPacksAC = (data: PackResponseType[]) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    data,\r\n} as const)\r\nconst setTotalPacksCountAC = (totalPacks: number) => ({\r\n    type: 'SET-TOTAL-PACKS-COUNT',\r\n    totalPacks,\r\n} as const)\r\nexport const setCurrentPageAC = (pageNumber: number) => ({\r\n    type: 'SET-CURRENT-PAGE',\r\n    pageNumber,\r\n} as const)\r\nexport const delPackAC = (id: string) => ({\r\n    type: 'PACKS/DEL-PACK',\r\n    id\r\n} as const)\r\nexport const updatePackAC = (data: UpdatePacksRequestDataType) => ({\r\n    type: 'PACKS/UPDATE-PACK',\r\n    data\r\n} as const)\r\nexport const setUserIdAC = (userId: string) => ({\r\n    type: 'PACKS/SET-USER-ID',\r\n    userId\r\n} as const)\r\n\r\n//thunk\r\nexport const getPacksTC = (): AppThunkType => (dispatch, getState) => {\r\n  // debugger\r\n    dispatch(setAppStatusAC('loading'))\r\n    const state = getState()\r\n    const currentPage = state.packs.currentPage\r\n    const packName = state.packs.name\r\n    const minCardsCount = state.packs.minCardsCount\r\n    const maxCardsCount = state.packs.maxCardsCount\r\n    const userId = state.packs.userId\r\n    const pageCount = state.packs.pageCount\r\n\r\n    packsAPI.getPacks(pageCount,currentPage,packName,minCardsCount,maxCardsCount,userId)\r\n        .then(res => {\r\n            dispatch(setTotalPacksCountAC(res.data.cardPacksTotalCount))\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('get packs error')\r\n        })\r\n}\r\n\r\nexport const addPackTC = (data: AddPackRequestDataType): AppThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.addPack(data)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            console.log('pack added successfully')\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('add pack error')\r\n        })\r\n}\r\n\r\nexport const delPackTC = (id: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.deletePack(id)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(getPacksTC())\r\n            console.log('pack deleted successfully')\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('delete pack error')\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (data: UpdatePacksRequestDataType): AppThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.updatePack(data)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            console.log('pack updated successfully')\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('update pack error')\r\n        })\r\n}\r\n\r\n//types\r\nexport type PacksActionsType = ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setTotalPacksCountAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof delPackAC>\r\n    | ReturnType<typeof updatePackAC>\r\n    | ReturnType<typeof setUserIdAC>\r\n\r\nexport type GetPacksRequestDataType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: number\r\n    page?: number\r\n    pageCount?: string\r\n    user_id?: string\r\n}\r\n\r\nexport type PackResponseType = {\r\n    \"_id\": string,\r\n    \"user_id\": string,\r\n    \"user_name\": string,\r\n    \"private\": boolean,\r\n    \"name\": string,\r\n    \"path\": string,\r\n    \"grade\": number,\r\n    \"shots\": number,\r\n    \"cardsCount\": number,\r\n    \"type\": string,\r\n    \"rating\": number,\r\n    \"created\": string,\r\n    \"updated\": string,\r\n    \"more_id\": string,\r\n    \"__v\": number,\r\n}\r\n\r\nexport type UpdatePacksRequestDataType = {\r\n    _id: string\r\n    name?: string\r\n    private?: boolean\r\n}\r\n","import React from \"react\";\r\nimport SuperButton from \"../../../superComponents/c2-SuperButton/SuperButton\";\r\nimport s from './Pack.module.css'\r\nimport {PackResponseType, UpdatePacksRequestDataType} from \"../../../../m2-bll/packs-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Pack = (props: PackPropsType) => {\r\n\r\n    const updateTime = new Date(props.updated).toLocaleDateString(['ban', 'id'])\r\n\r\n    const delPack = () => {\r\n        props.delPack(props._id)\r\n    }\r\n    const updatePack = () => {\r\n        props.updatePack({_id: props._id, name: \"Dima's updated pack\"})\r\n    }\r\n\r\n    // ОнКлик на кнопку Edit\r\n    // const updatePack = () => {\r\n    //   props.updatePacks(props.updatePacks.cardsPack)\r\n    // }\r\n    return (\r\n        <div className={s.packItem}>\r\n            <div className={s.packSpecification}>{props.user_name}</div>\r\n            <div className={s.packSpecification}>{props.name}</div>\r\n            <div className={s.packSpecification}>{props.cardsCount}</div>\r\n            <div className={s.packSpecification}>{updateTime}</div>\r\n            <div className={s.packSpecification}><SuperButton onClick={delPack}>Delete</SuperButton></div>\r\n            <div className={s.packSpecification}><SuperButton onClick={updatePack}>Edit</SuperButton></div>\r\n            <div className={s.packSpecification}><NavLink to={`/cards/${props._id}`}>cards</NavLink></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\n\r\ntype PackPropsType = PackResponseType &\r\n    {\r\n        updatePack: (data: UpdatePacksRequestDataType) => void\r\n        delPack: (id: string) => void\r\n    }","import React from \"react\";\r\nimport {Slider} from \"@material-ui/core\";\r\n\r\n\r\ntype SuperDoubleRangePropsType = {\r\n    onChangeRange?:  (event: any, value: number | number[]) => void\r\n    value?: [number, number]\r\n    // min, max, step, disable, ...\r\n}\r\n\r\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (\r\n    {\r\n        onChangeRange, value,\r\n        // min, max, step, disable, ...\r\n    }\r\n) => {\r\n    // сделать самому, можно подключать библиотеки\r\n\r\n    return (\r\n        <>\r\n            <Slider\r\n                style={{margin: '0', height: '20px'}}\r\n                value={value}\r\n                onChange={onChangeRange}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n                name='cards count'\r\n                min={0}\r\n                max={20}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperDoubleRange;\r\n","import React, {ChangeEvent, useCallback, useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Pagination} from '@material-ui/lab';\r\nimport {\r\n    addPackTC,\r\n    delPackTC,\r\n    getPacksTC,\r\n    setCurrentPageAC, setUserIdAC,\r\n    UpdatePacksRequestDataType,\r\n    updatePackTC\r\n} from \"../../../m2-bll/packs-reducer\";\r\nimport {Pack} from \"./Pack/Pack\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport s from './Pack/Pack.module.css'\r\nimport st from './Packs.module.css'\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {Login} from \"../Login/Login\";\r\nimport SuperDoubleRange from \"../../superComponents/c8-SuperDoubleRange/SuperDoubleRange\";\r\n\r\nexport const Packs = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const cardPacks = useSelector((state: AppStoreType) => state.packs.cardPacks)\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n    const totalPacks = useSelector((state: AppStoreType) => state.packs.totalPacksCount)\r\n    const pageSize = useSelector((state: AppStoreType) => state.packs.pageSize)\r\n    const currentPage = useSelector((state: AppStoreType) => state.packs.currentPage)\r\n    const userId = useSelector((state: AppStoreType) => state.auth.userData._id)\r\n    const delPack = useCallback(function (id: string) {\r\n        dispatch(delPackTC(id))\r\n    }, [dispatch])\r\n    const updatePack = useCallback(function (data: UpdatePacksRequestDataType) {\r\n        dispatch(updatePackTC(data))\r\n    }, [dispatch])\r\n    const showMyPacks = () => {\r\n        dispatch(setUserIdAC(userId))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const showAllPacks = () => {\r\n        dispatch(setUserIdAC(''))\r\n        dispatch(getPacksTC())\r\n    }\r\n\r\n    //pagination\r\n    let pages = []\r\n    let pagesCount = Math.ceil(totalPacks / pageSize)\r\n    for (let i = 1; i <= pagesCount; i++) pages.push(i)\r\n    const onPageChangedHandler = (p: number) => {\r\n        dispatch(setCurrentPageAC(p))\r\n        dispatch(getPacksTC())\r\n    }\r\n    //\r\n\r\n    useEffect(() => {\r\n        showAllPacks()\r\n    }, [dispatch])\r\n\r\n    const mappedPacks = cardPacks && cardPacks.map((p, i) => <Pack\r\n        key={i}\r\n        {...p}\r\n        delPack={delPack}\r\n        updatePack={updatePack}\r\n    />)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Login/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={st.titleParent}>\r\n\r\n                <h1>Packs</h1>\r\n\r\n\r\n                {/*показывает окошко с выбором кол-ва отображаемых колод\r\n\r\n                <div className={st.pageCount}>\r\n                    <SuperSelect\r\n                        options={['10', '5', '20', '50', '100']}\r\n                        onChangeOption={(option: string) => dispatch(getPacksTC({pageCount: option}))}/> pages displayed\r\n                </div>*/}\r\n\r\n                <div className={st.filter}>\r\n                    <SuperDoubleRange\r\n                        value={[0, 20]}\r\n                        />\r\n                </div>\r\n\r\n                <div className={st.paginator}>\r\n\r\n                    <Pagination count={pagesCount}\r\n                                boundaryCount={1}\r\n                                defaultPage={1}\r\n                                page={currentPage}\r\n                                onChange={(e: ChangeEvent<any>, p: number) => onPageChangedHandler(p)}/>\r\n\r\n                    <SuperButton onClick={showMyPacks}> my packs </SuperButton>\r\n                    <SuperButton onClick={showAllPacks}> all packs </SuperButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={`${s.packItem} ${st.packContents}`}>\r\n                <div>username</div>\r\n                <div>name</div>\r\n                <div>cards count</div>\r\n                <div>last update</div>\r\n                <div><SuperButton onClick={() => dispatch(addPackTC({name: 'Aleks/Dima/Elena pack'}))}>add</SuperButton>\r\n                </div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n\r\n            {mappedPacks}\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport SuperButton from \"../../../superComponents/c2-SuperButton/SuperButton\";\r\nimport s from './Card.module.css'\r\nimport {CardDataType} from \"../../../../m2-bll/cards-reducer\";\r\nimport {updateCardDataType} from \"../../../../m3-dal/api\";\r\n\r\ntype CardPropsType = CardDataType & {\r\n    delCard: (id: string, packId: string) => void\r\n    updateCard: (updateCard: updateCardDataType) => void\r\n    packId: string\r\n}\r\n\r\nexport const Card = (props: CardPropsType) => {\r\n\r\n    const deleteCardHandler = () => props._id && props.delCard(props._id, props.packId)\r\n    const updateCardHandler = () => props._id && props.updateCard({_id: props._id})\r\n    // const updateCardHandler = () => {\r\n    //     props._id && props.updateCard({_id: props._id, packId: props.packId})\r\n    // }\r\n\r\n    return (\r\n        <div className={s.cardItem}>\r\n            <div className={s.cardSpecification}>{props.question}</div>\r\n            <div className={s.cardSpecification}>{props.answer}</div>\r\n            <div className={s.cardSpecification}>{props.grade}</div>\r\n            <div className={s.cardSpecification}>{props.updated}</div>\r\n            <div className={s.cardSpecification}><SuperButton onClick={deleteCardHandler}>delete</SuperButton></div>\r\n            <div className={s.cardSpecification}><SuperButton onClick={updateCardHandler}>edit</SuperButton></div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import {setAppStatusAC} from \"./app-reducer\";\r\nimport {cardsAPI, CreateCardRequestDataType, updateCardDataType} from \"../m3-dal/api\";\r\nimport {AppThunkType} from \"./store\";\r\n\r\nconst initialState = {\r\n    cards: null as Array<CardDataType> | null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: CardsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS/SET-CARDS':\r\n            return {...state, cards: action.cards}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setCardsAC = (cards: CardDataType[]) => ({\r\n    type: 'CARDS/SET-CARDS',\r\n    cards\r\n} as const)\r\n\r\n\r\n//thunk\r\nexport const getCardsTC = (cardsPack_id: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.getCards(cardsPack_id)\r\n        .then(res => {\r\n            dispatch(setCardsAC(res.data.cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('get cards error')\r\n        })\r\n}\r\n\r\nexport const addCardTC = (data: CreateCardRequestDataType): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.addCard(data)\r\n        .then(() => {\r\n            dispatch(getCardsTC(data.cardsPack_id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.res ? e.res.data.error : (`Add card failed: ${e.message}.`)\r\n            dispatch(setAppStatusAC('failed'))\r\n            alert(error)\r\n        })\r\n}\r\n\r\nexport const delCardTC = (id: string, packId: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.deleteCard(id)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(getCardsTC(packId))\r\n            console.log('card deleted successfully')\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('delete card error')\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (packId: string, updateCardData: updateCardDataType): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.updateCard(updateCardData)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error\r\n                : (err.message + ' , error')\r\n            dispatch(setAppStatusAC('failed'))\r\n            alert(error)\r\n        })\r\n}\r\n\r\n//types\r\nexport type CardsActionsType = ReturnType<typeof setCardsAC> |\r\n    ReturnType<typeof setAppStatusAC>\r\n\r\n// export type GetCardsRequestDataType = {\r\n//     cardAnswer?: string\r\n//     cardQuestion?: string\r\n//     cardsPack_id: string\r\n//     min?: number\r\n//     max?: number\r\n//     sortCards?: number\r\n//     page?: number\r\n//     pageCount?: number\r\n// }\r\n\r\nexport type CardDataType = {\r\n    cardsPack_id: string\r\n    answer?: string\r\n    comments?: string\r\n    created?: string\r\n    grade?: number\r\n    more_id?: string\r\n    question?: string\r\n    questionImg?: string\r\n    rating?: number\r\n    shots?: number\r\n    type?: string\r\n    updated?: string\r\n    user_id?: string\r\n    __v?: number\r\n    _id?: string\r\n}","import React, {useCallback, useEffect} from \"react\"\r\nimport s from \"./Card/Card.module.css\";\r\nimport st from \"./Cards.module.css\"\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {Card} from \"./Card/Card\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport {addCardTC, delCardTC, getCardsTC, updateCardTC} from \"../../../m2-bll/cards-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Login} from \"../Login/Login\";\r\nimport {updateCardDataType} from \"../../../m3-dal/api\";\r\n\r\nexport const Cards = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const cards = useSelector((state: AppStoreType) => state.cards.cards)\r\n    const {packID} = useParams<{ packID: string }>()\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n\r\n\r\n    const delCard = useCallback((id: string, packId: string) => {\r\n        dispatch(delCardTC(id, packId))\r\n    }, [dispatch])\r\n\r\n    // const updateCard = useCallback((data: UpdateCardsRequestDataType) => {\r\n    //     dispatch(updateCardTC(data))\r\n    // }, [dispatch])\r\n\r\n    const updateCard = useCallback((updateCardData: updateCardDataType) => {\r\n        dispatch(updateCardTC(packID, updateCardData))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(packID))\r\n    }, [dispatch, packID])\r\n\r\n    const mappedCards = cards && cards.map((c, i) => <Card\r\n        key={i}\r\n        {...c}\r\n        packId={packID}\r\n        delCard={delCard}\r\n        updateCard={updateCard}\r\n    />)\r\n\r\n    const addCardHandler = () => {\r\n        dispatch(addCardTC({cardsPack_id: packID}))\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Login/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h1>Cards</h1>\r\n            </div>\r\n\r\n            <div className={`${s.cardItem} ${st.cardContents}`}>\r\n                <div>question</div>\r\n                <div>answer</div>\r\n                <div>grade</div>\r\n                <div>last update</div>\r\n                <div><SuperButton type={\"submit\"} onClick={addCardHandler}>add</SuperButton></div>\r\n                <div></div>\r\n            </div>\r\n\r\n            {mappedCards}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Redirect, Route, Switch } from \"react-router-dom\";\r\nimport {Error404} from \"../components/Error404\";\r\nimport {Login} from \"../components/Login/Login\";\r\nimport {Profile} from \"../components/Profile\";\r\nimport {Register} from \"../components/Registration/Register\";\r\nimport {NewPassword} from \"../components/NewPassword\";\r\nimport {ForgotPassword} from \"../components/ForgotPassword\";\r\n\r\nimport {Packs} from \"../components/Packs/Packs\";\r\nimport {Cards} from \"../components/Cards/Cards\";\r\n\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/register',\r\n    PROFILE: '/profile',\r\n    FORGOT_PASSWORD: '/forgot-password',\r\n    NEW_PASSWORD: '/new-password',\r\n    PACKS: '/packs',\r\n    CARDS: '/cards/:packID',\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.FORGOT_PASSWORD} render={() => <ForgotPassword/>}/>\r\n                <Route path={PATH.NEW_PASSWORD + '/:token?'} render={() => <NewPassword/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={PATH.CARDS} render={() => <Cards/>}/>\r\n\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {PATH} from \"../routes/Routes\";\r\nimport SuperButton from \"../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logoutTC} from \"../../m2-bll/auth-reducer\";\r\n\r\nexport const Header = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.wrapper}>\r\n                <NavLink to={PATH.LOGIN} activeClassName={s.active}>Login</NavLink>\r\n                <NavLink to={PATH.REGISTER} activeClassName={s.active}>Register</NavLink>\r\n                <NavLink to={PATH.PROFILE} activeClassName={s.active}>Profile</NavLink>\r\n                <NavLink to={PATH.PACKS} activeClassName={s.active}>Packs</NavLink>\r\n                <NavLink to={PATH.CARDS} activeClassName={s.active}>Cards</NavLink>\r\n                <NavLink to={PATH.FORGOT_PASSWORD} activeClassName={s.active}>ForgotPassword</NavLink>\r\n                <NavLink to={PATH.NEW_PASSWORD} activeClassName={s.active}>SetNewPassword</NavLink>\r\n                <SuperButton onClick={() => dispatch(logoutTC)}>Log out</SuperButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Loader.module.css';\r\n\r\nexport const Loader = () => {\r\n    return <div className={s.ldsCircle}>\r\n        <div></div>\r\n    </div>\r\n}","import React, {useEffect} from \"react\";\r\nimport {Header} from \"./m1-ui/header/Header\";\r\nimport {Routes} from \"./m1-ui/routes/Routes\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {AppStoreType} from \"./m2-bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setIsInitializedTC} from \"./m2-bll/app-reducer\";\r\nimport {Loader} from \"./m1-ui/superComponents/Loader/Loader\";\r\n\r\nexport const Main = () => {\r\n\r\n    const isInitialized = useSelector<AppStoreType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setIsInitializedTC())\r\n    }, [dispatch])\r\n\r\n    if(!isInitialized){\r\n        return <Loader />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HashRouter>\r\n                <Header/>\r\n                <Routes/>\r\n            </HashRouter>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Main} from \"./n1-main/Main\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"./n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"./n1-main/m2-bll/app-reducer\";\r\nimport {Loader} from \"./n1-main/m1-ui/superComponents/Loader/Loader\";\r\n\r\nconst App = () => {\r\n    const status = useSelector<AppStoreType, RequestStatusType>(state => state.app.status)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        {status === 'loading' && <Loader />}\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {registerReducer} from \"./registration-reducer\";\r\nimport {AppActionsType, appReducer} from \"./app-reducer\";\r\nimport {recoverPasswordReducer} from \"./recoverPassword-reducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPassword-reducer\";\r\nimport {PacksActionsType, packsReducer} from \"./packs-reducer\";\r\nimport {CardsActionsType, cardsReducer} from \"./cards-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    app: appReducer,\r\n    forgotPassword: recoverPasswordReducer,\r\n    setNewPassword: setNewPasswordReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n});\r\nexport type AppActions = PacksActionsType | CardsActionsType | AppActionsType\r\nexport type AppThunkType<ReturnType= void> = ThunkAction<ReturnType, AppStoreType, unknown, AppActions>\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store; // for dev\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from \"./n1-main/m2-bll/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <React.StrictMode>\r\n            <App/>\r\n        </React.StrictMode>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgr\":\"styles_bgr__3WPbN\",\"form\":\"styles_form__ynavo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packItem\":\"Pack_packItem__1sY46\",\"packSpecification\":\"Pack_packSpecification__3K5dZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardItem\":\"Card_cardItem__3aCl1\",\"cardSpecification\":\"Card_cardSpecification__m63BW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Header_active__IYuL5\",\"wrapper\":\"Header_wrapper__15i8W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packContents\":\"Packs_packContents__1T4hR\",\"titleParent\":\"Packs_titleParent__2Wtgn\",\"paginator\":\"Packs_paginator__2y9Yz\",\"filter\":\"Packs_filter__3sdg0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__mWkiI\",\"errorInput\":\"SuperInputText_errorInput__3yOzh\",\"error\":\"SuperInputText_error__3KmT8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1_C4x\",\"red\":\"SuperButton_red__2yMDL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1fMZO\",\"spanClassName\":\"SuperCheckbox_spanClassName__3e5Ho\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authError\":\"Login_authError__1a1YH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContents\":\"Cards_cardContents__hPMgJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsCircle\":\"Loader_ldsCircle__1RXqo\"};"],"sourceRoot":""}