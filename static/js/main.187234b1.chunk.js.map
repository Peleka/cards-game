{"version":3,"sources":["n1-main/m1-ui/common/styles.module.css","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/superComponents/c1-SuperInputText/SuperInputText.module.css","n1-main/m1-ui/superComponents/c2-SuperButton/SuperButton.module.css","n1-main/m1-ui/superComponents/c3-SuperCheckbox/SuperCheckbox.module.css","n1-main/m1-ui/routes/pages/Error404.tsx","n1-main/m1-ui/superComponents/c2-SuperButton/SuperButton.tsx","n1-main/m1-ui/superComponents/c3-SuperCheckbox/SuperCheckbox.tsx","n1-main/m1-ui/superComponents/c1-SuperInputText/SuperInputText.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/authReducer.ts","n1-main/m1-ui/routes/pages/Login.tsx","n1-main/m1-ui/routes/pages/Profile.tsx","n1-main/m2-bll/app-reducer.tsx","n1-main/m2-bll/registrationReducer.ts","n1-main/m1-ui/routes/pages/Registration/Register.tsx","n1-main/m2-bll/setNewPasswordReducer.ts","n1-main/m1-ui/routes/pages/NewPassword.tsx","n1-main/m2-bll/recoverPassword-reducer.ts","n1-main/m1-ui/routes/pages/ForgotPassword.tsx","n1-main/m1-ui/routes/pages/TestPage.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/Main.tsx","App.tsx","reportWebVitals.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","Error404","SuperButton","red","className","restProps","finalClassName","s","default","SuperCheckbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","e","currentTarget","checked","SuperInputText","onChangeText","onKeyPress","onEnter","error","finalSpanClassName","errorInput","superInput","value","key","instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","delete","registerAPI","recoverPasswordAPI","message","resetPasswordToken","initialState","isLoggedIn","userData","setIsLoggedInAC","setUserDataAC","payload","logoutTC","dispatch","then","Login","useDispatch","useSelector","state","auth","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","res","userDataFromApi","_id","data","name","avatar","publicCardPacksCount","response","alert","loginTC","resetForm","to","bgr","handleSubmit","placeholder","handleChange","Profile","status","setAppStatusAC","isRegistered","Register","register","confirmedPassword","length","catch","registerTC","form","getFieldProps","touched","isNewPassword","NewPassword","newPasswordSet","setNewPassword","token","useParams","confirmPassword","onClick","recoveredPassword","ForgotPassword","forgotPassword","recoverPasswordTC","Message","props","TestPage","PATH","Routes","path","exact","render","Header","wrapper","activeClassName","active","console","log","Main","App","app","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.187234b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgr\":\"styles_bgr__1BTk6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Header_active__2DgLn\",\"wrapper\":\"Header_wrapper__YVqso\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__2j4-_\",\"errorInput\":\"SuperInputText_errorInput__3onHK\",\"error\":\"SuperInputText_error__geYwr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1E02K\",\"red\":\"SuperButton_red__3SVRd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__2MmIV\",\"spanClassName\":\"SuperCheckbox_spanClassName__3WU-E\"};","import React from 'react'\r\n\r\nexport const  Error404 = () => {\r\n    return (\r\n        <div>\r\n            <div>404</div>\r\n            <div>Page not found!</div>\r\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\r\n        </div>\r\n    )\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : s.default} ${className}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n}\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e)\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n        // сделайте так чтоб работал onChange и onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label>\n            <input\n                type={'checkbox'}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    )\n}\n\nexport default SuperCheckbox\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string | null\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = `${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create(\r\n    {\r\n        baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n        // baseURL: `http://localhost:7542/2.0`,\r\n        withCredentials: true,\r\n    })\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me')\r\n    }\r\n}\r\n\r\nexport const registerAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post('/auth/register', {email, password})\r\n    }\r\n}\r\n\r\nexport const recoverPasswordAPI = {\r\n    recoverPassword(email: string, message: string) {\r\n        return instance.post('/auth/forgot', {email, message})\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post('/auth/set-new-password', {password, resetPasswordToken})\r\n    }\r\n}\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../m3-dal/api\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    userData: null as UserDataType | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        case 'login/SET-USER-DATA':\r\n            return {...state, userData: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({\r\n    type: 'login/SET-IS-LOGGED-IN', value\r\n} as const)\r\n\r\nexport const setUserDataAC = (payload: UserDataType | null) => ({\r\n    type: 'login/SET-USER-DATA', payload\r\n} as const)\r\n\r\n//thunks\r\nexport const loginTC = (values: UserLoginData) => (dispatch: Dispatch<ActionsType>) => {\r\n\r\n    try {\r\n        authAPI.login(values.email, values.password, values.rememberMe).then(res => {\r\n            const userDataFromApi: UserDataType = {\r\n                _id: res.data._id,\r\n                name: res.data.name,\r\n                email: res.data.email,\r\n                avatar: res.data.avatar || null,\r\n                publicCardPacksCount: res.data.publicCardPacksCount\r\n            }\r\n            dispatch(setUserDataAC(userDataFromApi))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : e.message\r\n        alert(error)\r\n    }\r\n}\r\n\r\nexport const logoutTC = (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        authAPI.logout().then(() => {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setUserDataAC(null))\r\n        })\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setUserDataAC>\r\n\r\nexport type UserLoginData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type UserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string | null\r\n    publicCardPacksCount: number\r\n}","import React from 'react'\r\nimport s from '../../common/styles.module.css'\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../superComponents/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../../m2-bll/authReducer\";\r\nimport {useFormik} from 'formik';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h2> Login </h2>\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <SuperInputText type='email'\r\n                                placeholder='Enter your E-mail'\r\n                                name='email'\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.email}/> <br/>\r\n\r\n                <SuperInputText type='password'\r\n                                placeholder='Enter your password'\r\n                                name='password'\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.password}/> <br/>\r\n\r\n                <SuperCheckbox name='rememberMe'\r\n                               onChange={formik.handleChange}/> Remember me <br/>\r\n\r\n                <SuperButton type='submit'>\r\n                    Login\r\n                </SuperButton>\r\n            </form>\r\n\r\n            <NavLink to='/forgot-password'>Forgot Password</NavLink> <br/>\r\n            <NavLink to=\"/register\"><SuperButton> Sign Up </SuperButton></NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport {Login} from \"./Login\";\r\n\r\nexport const  Profile = () => {\r\n\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Login />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Profile\r\n        </div>\r\n    )\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    status\r\n} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\n\r\n","import {registerAPI} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isRegistered: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registerReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"register/SET-SIGN-UP\":\r\n            return {...state, isRegistered: action.isRegistered}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setSignUpAC = (isRegistered: boolean) => ({\r\n    type: 'register/SET-SIGN-UP',\r\n    isRegistered\r\n} as const)\r\n\r\n//thunks\r\nexport const registerTC = (values: UserLoginData) => {\r\n    return (dispatch: Dispatch<ActionsType>) =>  {\r\n        dispatch(setAppStatusAC('loading'))\r\n        registerAPI.register(values.email, values.password)\r\n            .then(() => {\r\n                dispatch(setSignUpAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                const error = e.response ? e.response.data.error : e.message\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setSignUpAC> | ReturnType<typeof setAppStatusAC>\r\ntype UserLoginData = {\r\n    email: string\r\n    password: string\r\n}","import React from 'react'\r\nimport s from '../../../common/styles.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperInputText from \"../../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../../m2-bll/store\";\r\nimport {registerTC} from \"../../../../m2-bll/registrationReducer\";\r\n\r\ntype SignupFormErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmedPassword?: string\r\n}\r\nexport const Register = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector((state: AppStoreType) => state.register.isRegistered)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmedPassword: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: SignupFormErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address.';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be at least 8 symbols'\r\n            }\r\n            if (values.password && !values.confirmedPassword) {\r\n                errors.confirmedPassword = 'Confirm your password'\r\n            } else if (values.password !== values.confirmedPassword) {\r\n                errors.confirmedPassword = 'You entered two different passwords.'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            if (values.password === values.confirmedPassword) {\r\n                dispatch(registerTC(values))\r\n                formik.resetForm()\r\n            }\r\n        },\r\n    })\r\n\r\n    if(isRegistered) {\r\n        return <Redirect to={'./login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h1>it-incubator</h1>\r\n            <h2>Sign In</h2>\r\n            <form onSubmit={formik.handleSubmit} className={s.form}>\r\n\r\n                <SuperInputText\r\n                    type='email'\r\n                    placeholder='Email'\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    {...formik.getFieldProps('password')}\r\n                    //formik.getFieldProps вместо этого:\r\n                    // name='password'\r\n                    // onChange={formik.handleChange}\r\n                    // value={formik.values.password}\r\n                />\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Confirm your password'\r\n                    error={formik.touched.confirmedPassword ? formik.errors.confirmedPassword : null}\r\n                    {...formik.getFieldProps('confirmedPassword')}\r\n                />\r\n\r\n                <div>\r\n                    <NavLink to='/login'><SuperButton> Cancel </SuperButton></NavLink>\r\n                    <SuperButton type={'submit'}> Register </SuperButton>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {setAppStatusAC} from \"./app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {recoverPasswordAPI} from \"../m3-dal/api\";\r\n\r\nconst initialState = {\r\n  isNewPassword: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'setNewPassword/SET-NEW-PASSWORD':\r\n      return {...state, isNewPassword: true}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// AC\r\nconst setNewPasswordAC = () => ({\r\n  type: 'setNewPassword/SET-NEW-PASSWORD'\r\n} as const)\r\n\r\n\r\n// Thunk\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    recoverPasswordAPI.setNewPassword(password, resetPasswordToken)\r\n    .then(() => {\r\n      dispatch(setNewPasswordAC())\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    .catch((e) => {\r\n      const error = e.response ? e.response.data.error : e.message\r\n      alert(error)\r\n    })\r\n  }\r\n}\r\n\r\n// Type\r\ntype ActionsType = ReturnType<typeof setNewPasswordAC> | ReturnType<typeof setAppStatusAC>","import React from 'react'\r\nimport s from '../../common/styles.module.css'\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../../../m2-bll/authReducer\";\r\nimport {setNewPasswordTC} from \"../../../m2-bll/setNewPasswordReducer\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\n\r\ntype SetNewPassErrorType = {\r\n  password?: string\r\n  confirmPassword?: string\r\n}\r\n\r\nexport const  NewPassword = () => {\r\n  const dispatch = useDispatch()\r\n  const newPasswordSet = useSelector((state: AppStoreType) => state.setNewPassword.isNewPassword)\r\n  const token = useParams<{ token: string }>()\r\n\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password: '',\r\n      confirmPassword: ''\r\n    },\r\n    validate: (values) => {\r\n      // debugger\r\n      const errors: SetNewPassErrorType = {};\r\n      if (!values.password) {\r\n        errors.password = 'Password is required'\r\n      } else if (values.password.length < 8) {\r\n        errors.password = 'Password must be at least 8 symbols'\r\n      }\r\n      if (values.password && !values.confirmPassword) {\r\n        errors.confirmPassword = 'Confirm your password'\r\n      } else if (values.password !== values.confirmPassword) {\r\n        errors.confirmPassword = 'You entered two different passwords.'\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      // debugger\r\n      // if (values.password === values.confirmPassword) {\r\n      //   dispatch(setNewPasswordTC(values.confirmPassword, token.token))\r\n      //   formik.resetForm()\r\n      // }\r\n      dispatch(setNewPasswordTC(values.password, token.token))\r\n    },\r\n  });\r\n\r\n  if (newPasswordSet) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.bgr}>\r\n              <h1>it-incubator</h1>\r\n              <h2>Set new password</h2>\r\n              <form onSubmit={formik.handleSubmit}>\r\n                <SuperInputText\r\n                  type='password'\r\n                  placeholder='New password'\r\n                  {...formik.getFieldProps('password')}\r\n                />\r\n                <SuperInputText\r\n                  type='password'\r\n                  placeholder='Confirm your new password'\r\n                  error={formik.touched.confirmPassword ? formik.errors.confirmPassword : null}\r\n                  {...formik.getFieldProps('confirmPassword')}\r\n                />\r\n              </form>\r\n              {/*{кнопка работае, но запросы не шлет}*/}\r\n              <SuperButton type={'submit'} onClick={() => {alert('blaaay')}}>Set new password</SuperButton>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {recoverPasswordAPI} from \"../m3-dal/api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    recoveredPassword: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoverPasswordReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'recoverPassword/CHANGE-PASSWORD':\r\n            return {...state, recoveredPassword: true}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const recoverPasswordAC = () => ({\r\n    type: 'recoverPassword/CHANGE-PASSWORD'\r\n} as const)\r\n\r\n//thunks\r\nexport const recoverPasswordTC = ( email: string, message: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) =>  {\r\n        dispatch(setAppStatusAC('loading'))\r\n        recoverPasswordAPI.recoverPassword(email, message)\r\n            .then(() => {\r\n                dispatch(recoverPasswordAC())\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                const error = e.response ? e.response.data.error : e.message\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n// types\r\ntype ActionsType = ReturnType<typeof recoverPasswordAC> | ReturnType<typeof setAppStatusAC>","import React from 'react'\r\nimport s from '../../common/styles.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {recoverPasswordTC} from \"../../../m2-bll/recoverPassword-reducer\";\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport {AppStoreType} from '../../../m2-bll/store';\r\n\r\nexport type RecoveryFormikErrorType = {\r\n    email?: string\r\n}\r\nexport const ForgotPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const recoveredPassword = useSelector((state: AppStoreType) => state.forgotPassword.recoveredPassword)\r\n\r\n\r\n    const message = `<div style=\"background-color: lime; padding: 15px\">\r\n            password recovery link:\t<a href='https://Peleka.github.io/cards-game/#/new-password/$token$'>link</a>\r\n            </div>`\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: RecoveryFormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\"\r\n            } else if (values.email.length < 11) {\r\n                errors.email = \"Email should be more 10 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(recoverPasswordTC(values.email, message))\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h1>it-incubator</h1>\r\n            <h2>Forgot your password?</h2>\r\n            {!recoveredPassword\r\n                ? <div>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <SuperInputText type='email'\r\n                                        placeholder='Email'\r\n                                        {...formik.getFieldProps('email')}\r\n                        />\r\n                        <SuperButton type={'submit'}>Send instructions</SuperButton>\r\n                    </form>\r\n                </div>\r\n                : <Message email={formik.values.email}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype MessagePropsType = {\r\n    email: string\r\n}\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div>\r\n            <h4>Check your Email</h4>\r\n            <span>\r\n                click the link in the message in your email {props.email}\r\n            </span>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../superComponents/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\nexport const  TestPage = () => {\r\n    return (\r\n        <div>\r\n            TestPage\r\n            <SuperInputText/>\r\n            <SuperButton/>\r\n            <SuperCheckbox/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Redirect, Route, Switch } from \"react-router-dom\";\r\nimport {Error404} from \"./pages/Error404\";\r\nimport {Login} from \"./pages/Login\";\r\nimport {Profile} from \"./pages/Profile\";\r\nimport {Register} from \"./pages/Registration/Register\";\r\nimport {NewPassword} from \"./pages/NewPassword\";\r\nimport {ForgotPassword} from \"./pages/ForgotPassword\";\r\nimport {TestPage} from \"./pages/TestPage\";\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/register',\r\n    PROFILE: '/profile',\r\n    FORGOT_PASSWORD: '/forgot-password',\r\n    NEW_PASSWORD: '/new-password',\r\n    TEST: '/test'\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.TEST}/>}/>\r\n\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.FORGOT_PASSWORD} render={() => <ForgotPassword/>}/>\r\n                <Route path={PATH.NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.TEST} render={() => <TestPage/>}/>\r\n\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {PATH} from \"../routes/Routes\";\r\nimport SuperButton from \"../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logoutTC} from \"../../m2-bll/authReducer\";\r\nimport {AppStoreType} from \"../../m2-bll/store\";\r\n\r\nexport const Header = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.wrapper}>\r\n                <NavLink to={PATH.LOGIN} activeClassName={s.active}>Login</NavLink>\r\n                <NavLink to={PATH.TEST} activeClassName={s.active}>Test</NavLink>\r\n                <NavLink to={PATH.REGISTER} activeClassName={s.active}>Register</NavLink>\r\n                <NavLink to={PATH.PROFILE} activeClassName={s.active}>Profile</NavLink>\r\n                <NavLink to={PATH.FORGOT_PASSWORD} activeClassName={s.active}>ForgotPassword</NavLink>\r\n                <NavLink to={PATH.NEW_PASSWORD} activeClassName={s.active}>SetNewPassword</NavLink>\r\n                <SuperButton onClick={() => {dispatch(logoutTC)\r\n                    console.log(isLoggedIn)}}>Log out</SuperButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Header} from \"./m1-ui/header/Header\";\r\nimport {Routes} from \"./m1-ui/routes/Routes\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <HashRouter>\r\n                <Header/>\r\n                <Routes/>\r\n            </HashRouter>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Main} from \"./n1-main/Main\";\nimport {CircularProgress} from \"@material-ui/core\";\nimport {useSelector} from \"react-redux\";\nimport {AppStoreType} from \"./n1-main/m2-bll/store\";\nimport {RequestStatusType} from \"./n1-main/m2-bll/app-reducer\";\n\nconst App = () => {\n    const status = useSelector<AppStoreType, RequestStatusType>(state => state.app.status)\n\n  return (\n    <div className=\"App\">\n        {status === 'loading' && <CircularProgress/>}\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {registerReducer} from \"./registrationReducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {recoverPasswordReducer} from \"./recoverPassword-reducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPasswordReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    app: appReducer,\r\n    forgotPassword: recoverPasswordReducer,\r\n    setNewPassword: setNewPasswordReducer,\r\n});\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store; // for dev\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}