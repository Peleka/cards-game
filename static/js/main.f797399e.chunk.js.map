{"version":3,"sources":["n1-main/m1-ui/common/styles.module.css","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/superComponents/c1-SuperInputText/SuperInputText.module.css","n1-main/m1-ui/superComponents/c2-SuperButton/SuperButton.module.css","n1-main/m1-ui/superComponents/c3-SuperCheckbox/SuperCheckbox.module.css","n1-main/m1-ui/routes/pages/Login/Login.module.css","n1-main/m1-ui/routes/pages/Error404.tsx","n1-main/m1-ui/superComponents/c2-SuperButton/SuperButton.tsx","n1-main/m1-ui/superComponents/c3-SuperCheckbox/SuperCheckbox.tsx","n1-main/m1-ui/superComponents/c1-SuperInputText/SuperInputText.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/app-reducer.tsx","n1-main/m2-bll/authReducer.ts","n1-main/m1-ui/routes/pages/Login/Login.tsx","n1-main/m1-ui/routes/pages/Profile.tsx","n1-main/m2-bll/registrationReducer.ts","n1-main/m1-ui/routes/pages/Registration/Register.tsx","n1-main/m2-bll/setNewPasswordReducer.ts","n1-main/m1-ui/routes/pages/NewPassword.tsx","n1-main/m2-bll/recoverPassword-reducer.ts","n1-main/m1-ui/routes/pages/ForgotPassword.tsx","n1-main/m1-ui/routes/pages/TestPage.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/Main.tsx","App.tsx","reportWebVitals.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","Error404","SuperButton","red","className","restProps","finalClassName","s","default","SuperCheckbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","e","currentTarget","checked","SuperInputText","onChangeText","onKeyPress","onEnter","error","finalSpanClassName","superInput","errorInput","value","key","instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","delete","registerAPI","recoverPasswordAPI","message","resetPasswordToken","initialState","status","setAppStatusAC","isLoggedIn","userData","authError","setIsLoggedInAC","setUserDataAC","payload","logoutTC","dispatch","then","Login","useDispatch","useSelector","state","auth","authErrorMessage","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","res","userDataFromApi","_id","data","name","avatar","publicCardPacksCount","catch","response","errorMessage","loginTC","resetForm","to","bgr","handleSubmit","form","placeholder","touched","getFieldProps","style","Profile","isRegistered","Register","register","confirmedPassword","length","alert","registerTC","isNewPassword","NewPassword","newPasswordSet","setNewPassword","token","useParams","confirmPassword","onClick","recoveredPassword","ForgotPassword","forgotPassword","recoverPasswordTC","Message","props","TestPage","PATH","Routes","path","exact","render","Header","wrapper","activeClassName","active","console","log","Main","App","app","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f797399e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgr\":\"styles_bgr__JQRFe\",\"form\":\"styles_form__22fGq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Header_active__7L8Fu\",\"wrapper\":\"Header_wrapper__15T7i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__hWvzj\",\"errorInput\":\"SuperInputText_errorInput__KDesT\",\"error\":\"SuperInputText_error__3SnbI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__3d2r2\",\"red\":\"SuperButton_red__1pIIf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__m_EV9\",\"spanClassName\":\"SuperCheckbox_spanClassName__3xdR6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authError\":\"Login_authError__21_mb\"};","import React from 'react'\r\n\r\nexport const  Error404 = () => {\r\n    return (\r\n        <div>\r\n            <div>404</div>\r\n            <div>Page not found!</div>\r\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\r\n        </div>\r\n    )\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string | null\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    // const finalInputClassName = `${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n    const finalInputClassName = `${s.superInput} ${error ? s.errorInput : ''} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create(\r\n    {\r\n        baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n        // baseURL: `http://localhost:7542/2.0`,\r\n        withCredentials: true,\r\n    })\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me')\r\n    }\r\n}\r\n\r\nexport const registerAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post('/auth/register', {email, password})\r\n    }\r\n}\r\n\r\nexport const recoverPasswordAPI = {\r\n    recoverPassword(email: string, message: string) {\r\n        return instance.post('/auth/forgot', {email, message})\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post('/auth/set-new-password', {password, resetPasswordToken})\r\n    }\r\n}\r\n\r\n\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    status\r\n} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../m3-dal/api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    userData: null as UserDataType | null,\r\n    authError: ''\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        case 'login/SET-USER-DATA':\r\n            return {...state, userData: action.payload}\r\n        case 'login/SET-AUTH-ERROR':\r\n            return {...state, authError: action.errorMessage}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({\r\n    type: 'login/SET-IS-LOGGED-IN', value\r\n} as const)\r\n\r\nexport const setUserDataAC = (payload: UserDataType | null) => ({\r\n    type: 'login/SET-USER-DATA', payload\r\n} as const)\r\n\r\nconst setAuthErrorAC = (errorMessage: string) => ({\r\n    type: 'login/SET-AUTH-ERROR', errorMessage\r\n} as const)\r\n\r\n//thunks\r\nexport const loginTC = (values: UserLoginData) => (dispatch: Dispatch<ActionsType>) => {\r\n\r\n    dispatch(setAppStatusAC('loading'))\r\n\r\n    authAPI.login(values.email, values.password, values.rememberMe)\r\n        .then((res) => {\r\n            const userDataFromApi: UserDataType = {\r\n                _id: res.data._id,\r\n                name: res.data.name,\r\n                email: res.data.email,\r\n                avatar: res.data.avatar || null,\r\n                publicCardPacksCount: res.data.publicCardPacksCount\r\n            }\r\n            dispatch(setUserDataAC(userDataFromApi))\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch ((e) => {\r\n        const error = e.response ? e.response.data.error : e.message\r\n        dispatch(setAuthErrorAC(error))\r\n        dispatch(setAppStatusAC('failed'))\r\n\r\n})\r\n}\r\n\r\nexport const logoutTC = (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        authAPI.logout().then(() => {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setUserDataAC(null))\r\n        })\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setUserDataAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAuthErrorAC>\r\n\r\nexport type UserLoginData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type UserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string | null\r\n    publicCardPacksCount: number\r\n}","import React from 'react'\r\nimport s from '../../../common/styles.module.css'\r\nimport SuperButton from \"../../../superComponents/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../../superComponents/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperInputText from \"../../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../../../m2-bll/authReducer\";\r\nimport {useFormik} from 'formik';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {AppStoreType} from \"../../../../m2-bll/store\";\r\nimport style from './Login.module.css'\r\n\r\ntype LoginErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n    const authErrorMessage = useSelector((state: AppStoreType) => state.auth.authError)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: LoginErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h2> Login </h2>\r\n\r\n            <form onSubmit={formik.handleSubmit} className={s.form}>\r\n\r\n                <SuperInputText\r\n                    type='email'\r\n                    placeholder='E-mail'\r\n                    error={formik.touched.email ? formik.errors.email : null}\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    error={formik.touched.password ? formik.errors.password : null}\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n\r\n                <br/>\r\n\r\n                <div>\r\n                    <SuperCheckbox {...formik.getFieldProps('rememberMe')}/>\r\n                    Remember me\r\n                </div>\r\n\r\n                <div className={style.authError}>\r\n                    {authErrorMessage}\r\n                </div>\r\n\r\n                <SuperButton type='submit'>\r\n                    Login\r\n                </SuperButton>\r\n            </form>\r\n\r\n            <NavLink to='/forgot-password'>Forgot Password</NavLink> <br/>\r\n            <NavLink to=\"/register\">Sign Up</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport {Login} from \"./Login/Login\";\r\n\r\nexport const  Profile = () => {\r\n\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Login />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Profile\r\n        </div>\r\n    )\r\n}","import {registerAPI} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isRegistered: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registerReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"register/SET-SIGN-UP\":\r\n            return {...state, isRegistered: action.isRegistered}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setSignUpAC = (isRegistered: boolean) => ({\r\n    type: 'register/SET-SIGN-UP',\r\n    isRegistered\r\n} as const)\r\n\r\n//thunks\r\nexport const registerTC = (values: UserLoginData) => {\r\n    return (dispatch: Dispatch<ActionsType>) =>  {\r\n        dispatch(setAppStatusAC('loading'))\r\n        registerAPI.register(values.email, values.password)\r\n            .then(() => {\r\n                dispatch(setSignUpAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                const error = e.response ? e.response.data.error : e.message\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setSignUpAC> | ReturnType<typeof setAppStatusAC>\r\ntype UserLoginData = {\r\n    email: string\r\n    password: string\r\n}","import React from 'react'\r\nimport s from '../../../common/styles.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperInputText from \"../../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../../m2-bll/store\";\r\nimport {registerTC} from \"../../../../m2-bll/registrationReducer\";\r\n\r\ntype SignupFormErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmedPassword?: string\r\n}\r\nexport const Register = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector((state: AppStoreType) => state.register.isRegistered)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmedPassword: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: SignupFormErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address.';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be at least 8 symbols'\r\n            }\r\n            if (values.password && !values.confirmedPassword) {\r\n                errors.confirmedPassword = 'Confirm your password'\r\n            } else if (values.password !== values.confirmedPassword) {\r\n                errors.confirmedPassword = 'You entered two different passwords.'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            if (values.password === values.confirmedPassword) {\r\n                dispatch(registerTC(values))\r\n                formik.resetForm()\r\n            }\r\n        },\r\n    })\r\n\r\n    if(isRegistered) {\r\n        return <Redirect to={'./login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h1>it-incubator</h1>\r\n            <h2>Sign In</h2>\r\n            <form onSubmit={formik.handleSubmit} className={s.form}>\r\n\r\n                <SuperInputText\r\n                    type='email'\r\n                    placeholder='Email'\r\n                    error={formik.touched.email ? formik.errors.email : null}\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    error={formik.touched.password ? formik.errors.password : null}\r\n                    {...formik.getFieldProps('password')}\r\n                    //formik.getFieldProps вместо этого:\r\n                    // name='password'\r\n                    // onChange={formik.handleChange}\r\n                    // value={formik.values.password}\r\n                />\r\n\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Confirm your password'\r\n                    error={formik.touched.confirmedPassword ? formik.errors.confirmedPassword : null}\r\n                    {...formik.getFieldProps('confirmedPassword')}\r\n                />\r\n                <div>\r\n                    <NavLink to='/login'><SuperButton> Cancel </SuperButton></NavLink>\r\n                    <SuperButton type={'submit'}> Register </SuperButton>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {setAppStatusAC} from \"./app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {recoverPasswordAPI} from \"../m3-dal/api\";\r\n\r\nconst initialState = {\r\n  isNewPassword: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'setNewPassword/SET-NEW-PASSWORD':\r\n      return {...state, isNewPassword: true}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// AC\r\nconst setNewPasswordAC = () => ({\r\n  type: 'setNewPassword/SET-NEW-PASSWORD'\r\n} as const)\r\n\r\n\r\n// Thunk\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    recoverPasswordAPI.setNewPassword(password, resetPasswordToken)\r\n    .then(() => {\r\n      dispatch(setNewPasswordAC())\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    .catch((e) => {\r\n      const error = e.response ? e.response.data.error : e.message\r\n      alert(error)\r\n    })\r\n  }\r\n}\r\n\r\n// Type\r\ntype ActionsType = ReturnType<typeof setNewPasswordAC> | ReturnType<typeof setAppStatusAC>","import React from 'react'\r\nimport s from '../../common/styles.module.css'\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../../../m2-bll/authReducer\";\r\nimport {setNewPasswordTC} from \"../../../m2-bll/setNewPasswordReducer\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\n\r\ntype SetNewPassErrorType = {\r\n  password?: string\r\n  confirmPassword?: string\r\n}\r\n\r\nexport const  NewPassword = () => {\r\n  const dispatch = useDispatch()\r\n  const newPasswordSet = useSelector((state: AppStoreType) => state.setNewPassword.isNewPassword)\r\n  const token = useParams<{ token: string }>()\r\n\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password: '',\r\n      confirmPassword: ''\r\n    },\r\n    validate: (values) => {\r\n      // debugger\r\n      const errors: SetNewPassErrorType = {};\r\n      if (!values.password) {\r\n        errors.password = 'Password is required'\r\n      } else if (values.password.length < 8) {\r\n        errors.password = 'Password must be at least 8 symbols'\r\n      }\r\n      if (values.password && !values.confirmPassword) {\r\n        errors.confirmPassword = 'Confirm your password'\r\n      } else if (values.password !== values.confirmPassword) {\r\n        errors.confirmPassword = 'You entered two different passwords.'\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      // debugger\r\n      // if (values.password === values.confirmPassword) {\r\n      //   dispatch(setNewPasswordTC(values.confirmPassword, token.token))\r\n      //   formik.resetForm()\r\n      // }\r\n      dispatch(setNewPasswordTC(values.password, token.token))\r\n    },\r\n  });\r\n\r\n  if (newPasswordSet) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.bgr}>\r\n              <h1>it-incubator</h1>\r\n              <h2>Set new password</h2>\r\n              <form onSubmit={formik.handleSubmit}>\r\n                <SuperInputText\r\n                  type='password'\r\n                  placeholder='New password'\r\n                  {...formik.getFieldProps('password')}\r\n                />\r\n                <SuperInputText\r\n                  type='password'\r\n                  placeholder='Confirm your new password'\r\n                  error={formik.touched.confirmPassword ? formik.errors.confirmPassword : null}\r\n                  {...formik.getFieldProps('confirmPassword')}\r\n                />\r\n              </form>\r\n              {/*{кнопка работае, но запросы не шлет}*/}\r\n              <SuperButton type={'submit'} onClick={() => {alert('blaaay')}}>Set new password</SuperButton>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {recoverPasswordAPI} from \"../m3-dal/api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    recoveredPassword: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoverPasswordReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'recoverPassword/CHANGE-PASSWORD':\r\n            return {...state, recoveredPassword: true}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const recoverPasswordAC = () => ({\r\n    type: 'recoverPassword/CHANGE-PASSWORD'\r\n} as const)\r\n\r\n//thunks\r\nexport const recoverPasswordTC = ( email: string, message: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) =>  {\r\n        dispatch(setAppStatusAC('loading'))\r\n        recoverPasswordAPI.recoverPassword(email, message)\r\n            .then(() => {\r\n                dispatch(recoverPasswordAC())\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                const error = e.response ? e.response.data.error : e.message\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n// types\r\ntype ActionsType = ReturnType<typeof recoverPasswordAC> | ReturnType<typeof setAppStatusAC>","import React from 'react'\r\nimport s from '../../common/styles.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {recoverPasswordTC} from \"../../../m2-bll/recoverPassword-reducer\";\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport {AppStoreType} from '../../../m2-bll/store';\r\n\r\nexport type RecoveryFormikErrorType = {\r\n    email?: string\r\n}\r\nexport const ForgotPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const recoveredPassword = useSelector((state: AppStoreType) => state.forgotPassword.recoveredPassword)\r\n\r\n\r\n    const message = `<div style=\"background-color: lime; padding: 15px\">\r\n            password recovery link:\t<a href='https://Peleka.github.io/cards-game/#/new-password/$token$'>link</a>\r\n            </div>`\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: RecoveryFormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\"\r\n            } else if (values.email.length < 11) {\r\n                errors.email = \"Email should be more 10 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(recoverPasswordTC(values.email, message))\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h1>it-incubator</h1>\r\n            <h2>Forgot your password?</h2>\r\n            {!recoveredPassword\r\n                ? <div>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <SuperInputText type='email'\r\n                                        placeholder='Email'\r\n                                        {...formik.getFieldProps('email')}\r\n                        />\r\n                        <SuperButton type={'submit'}>Send instructions</SuperButton>\r\n                    </form>\r\n                </div>\r\n                : <Message email={formik.values.email}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype MessagePropsType = {\r\n    email: string\r\n}\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div>\r\n            <h4>Check your Email</h4>\r\n            <span>\r\n                click the link in the message in your email {props.email}\r\n            </span>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../superComponents/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\nexport const  TestPage = () => {\r\n    return (\r\n        <div>\r\n            TestPage\r\n            <SuperInputText/>\r\n            <SuperButton/>\r\n            <SuperCheckbox/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Redirect, Route, Switch } from \"react-router-dom\";\r\nimport {Error404} from \"./pages/Error404\";\r\nimport {Login} from \"./pages/Login/Login\";\r\nimport {Profile} from \"./pages/Profile\";\r\nimport {Register} from \"./pages/Registration/Register\";\r\nimport {NewPassword} from \"./pages/NewPassword\";\r\nimport {ForgotPassword} from \"./pages/ForgotPassword\";\r\nimport {TestPage} from \"./pages/TestPage\";\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/register',\r\n    PROFILE: '/profile',\r\n    FORGOT_PASSWORD: '/forgot-password',\r\n    NEW_PASSWORD: '/new-password',\r\n    TEST: '/test'\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.TEST}/>}/>\r\n\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.FORGOT_PASSWORD} render={() => <ForgotPassword/>}/>\r\n                <Route path={PATH.NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.TEST} render={() => <TestPage/>}/>\r\n\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {PATH} from \"../routes/Routes\";\r\nimport SuperButton from \"../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logoutTC} from \"../../m2-bll/authReducer\";\r\nimport {AppStoreType} from \"../../m2-bll/store\";\r\n\r\nexport const Header = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.wrapper}>\r\n                <NavLink to={PATH.LOGIN} activeClassName={s.active}>Login</NavLink>\r\n                <NavLink to={PATH.TEST} activeClassName={s.active}>Test</NavLink>\r\n                <NavLink to={PATH.REGISTER} activeClassName={s.active}>Register</NavLink>\r\n                <NavLink to={PATH.PROFILE} activeClassName={s.active}>Profile</NavLink>\r\n                <NavLink to={PATH.FORGOT_PASSWORD} activeClassName={s.active}>ForgotPassword</NavLink>\r\n                <NavLink to={PATH.NEW_PASSWORD} activeClassName={s.active}>SetNewPassword</NavLink>\r\n                <SuperButton onClick={() => {dispatch(logoutTC)\r\n                    console.log(isLoggedIn)}}>Log out</SuperButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Header} from \"./m1-ui/header/Header\";\r\nimport {Routes} from \"./m1-ui/routes/Routes\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <HashRouter>\r\n                <Header/>\r\n                <Routes/>\r\n            </HashRouter>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Main} from \"./n1-main/Main\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"./n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"./n1-main/m2-bll/app-reducer\";\r\n\r\nconst App = () => {\r\n    const status = useSelector<AppStoreType, RequestStatusType>(state => state.app.status)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        {status === 'loading' && <CircularProgress/>}\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {registerReducer} from \"./registrationReducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {recoverPasswordReducer} from \"./recoverPassword-reducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPasswordReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    app: appReducer,\r\n    forgotPassword: recoverPasswordReducer,\r\n    setNewPassword: setNewPasswordReducer,\r\n});\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store; // for dev\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from \"./n1-main/m2-bll/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <React.StrictMode>\r\n            <App/>\r\n        </React.StrictMode>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}