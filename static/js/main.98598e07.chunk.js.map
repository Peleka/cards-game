{"version":3,"sources":["n1-main/m1-ui/components/Error404.tsx","n1-main/m1-ui/superComponents/c2-SuperButton/SuperButton.tsx","n1-main/m1-ui/superComponents/c3-SuperCheckbox/SuperCheckbox.tsx","n1-main/m1-ui/superComponents/c1-SuperInputText/SuperInputText.tsx","n1-main/m3-dal/api.ts","n1-main/m2-bll/app-reducer.ts","n1-main/m2-bll/auth-reducer.ts","n1-main/m1-ui/components/Login/Login.tsx","n1-main/m1-ui/common/images/cloud.png","n1-main/m1-ui/components/Profile/Profile.tsx","n1-main/m2-bll/registration-reducer.ts","n1-main/m1-ui/components/Registration/Register.tsx","n1-main/m2-bll/setNewPassword-reducer.ts","n1-main/m1-ui/components/NewPassword.tsx","n1-main/m2-bll/recoverPassword-reducer.ts","n1-main/m1-ui/components/ForgotPassword.tsx","n1-main/m2-bll/packs-reducer.ts","n1-main/m1-ui/components/Modal/ModalPacks/ModalForPacks.tsx","n1-main/m1-ui/components/Modal/ModalDelete/ModalDeleteItem.tsx","n1-main/m1-ui/components/Packs/Pack/Pack.tsx","n1-main/m1-ui/components/Packs/Packs.tsx","n1-main/m1-ui/components/Modal/ModalCards/ModalForCards.tsx","n1-main/m1-ui/components/Cards/Card/Card.tsx","n1-main/m2-bll/cards-reducer.ts","n1-main/m1-ui/components/Cards/Cards.tsx","n1-main/m1-ui/superComponents/Loader/Loader.tsx","n1-main/m1-ui/components/Learn/Learn.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/Main.tsx","App.tsx","reportWebVitals.ts","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/components/Modal/Modal.module.css","n1-main/m1-ui/components/Packs/Packs.module.css","n1-main/m1-ui/common/styles.module.css","n1-main/m1-ui/components/Packs/Pack/Pack.module.css","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/components/Cards/Card/Card.module.css","n1-main/m1-ui/components/Learn/Learn.module.css","n1-main/m1-ui/superComponents/c1-SuperInputText/SuperInputText.module.css","n1-main/m1-ui/superComponents/c2-SuperButton/SuperButton.module.css","n1-main/m1-ui/superComponents/c3-SuperCheckbox/SuperCheckbox.module.css","n1-main/m1-ui/components/Profile/Cloud.module.css","n1-main/m1-ui/components/Cards/Cards.module.css","n1-main/m1-ui/components/Login/Login.module.css","n1-main/m1-ui/superComponents/Loader/Loader.module.css"],"names":["Error404","SuperButton","red","className","restProps","finalClassName","s","default","SuperCheckbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","e","currentTarget","checked","SuperInputText","onChangeText","onKeyPress","onEnter","error","finalSpanClassName","superInput","errorInput","value","key","instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","delete","registerAPI","recoverPasswordAPI","message","resetPasswordToken","packsAPI","pageCount","currentPage","packName","minCardsCount","maxCardsCount","userId","sortPacks","get","data","cardsPack","id","packId","newPackName","put","_id","name","cardsAPI","cardsPack_id","page","sortCards","params","card","updateCardData","question","answer","card_id","grade","initialState","status","isInitialized","setAppStatusAC","setIsInitializedAC","userData","avatar","created","isAdmin","publicCardPacksCount","token","tokenDeathTime","updated","verified","__v","isLoggedIn","authError","setIsLoggedInAC","logoutTC","dispatch","then","Login","useDispatch","useSelector","state","auth","authErrorMessage","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","res","catch","response","errorMessage","loginTC","resetForm","to","bgr","handleSubmit","form","placeholder","touched","getFieldProps","style","Profile","userName","myPacksCount","nameOnDisplay","hello","cloud","src","alt","isRegistered","Register","register","confirmedPassword","length","alert","registerTC","isNewPassword","NewPassword","newPasswordSet","setNewPassword","useParams","confirmPassword","recoveredPassword","ForgotPassword","forgotPassword","recoverPasswordTC","Message","props","cardPacks","totalPacksCount","pageSize","setUserIdAC","setNameAC","setSortPacksAC","sortValue","getPacksTC","getState","packs","totalPacks","cardPacksTotalCount","console","log","ModalForPacks","useState","titlePack","newText","setNewText","wrapperModal","modal","buttonBlock","onClick","addNewPack","closeAddEditPackModal","ModalDeleteItem","color","title","deleteItem","closeDeleteModal","Pack","React","memo","updateTime","Date","toLocaleDateString","editPackModal","setEditPackModal","deletePackModal","setDeletePackModal","packItem","packSpecification","user_name","cardsCount","cardsLink","cursor","user_id","currentUserId","green","updatePack","delPack","Packs","myPacks","setMyPacks","searchText","setSearchText","activeMyPacksButton","st","activeButton","activeAllPacksButton","useEffect","addPackModal","setAddPackModal","useCallback","delPackTC","updatePackTC","sortPacksByUpdate","search","pages","pagesCount","Math","ceil","i","push","mappedPacks","map","p","packsContainer","packsField","packContents","sidebar","showMyAllPacks","filterByCardsCount","Slider","margin","padding","onChangeCommitted","event","newValue","Array","setMinCardsCountAC","setMaxCardsCountAC","valueLabelDisplay","aria-labelledby","min","max","paginator","Pagination","count","boundaryCount","defaultPage","pageNumber","onPageChangedHandler","ModalForCards","questionPlaceholder","setQuestion","answerPlaceholder","addQuestion","addNewCard","closeAddEditCardModal","Card","update","editCardModal","setEditCardsModal","deleteCardModal","setDeleteCardModal","cardItem","cardSpecification","updateCard","delCard","cards","packUserId","cardsTotalCount","minGrade","maxGrade","setSortCardsAC","getCardsTC","totalCards","Cards","packID","addCardModal","setAddCardsModal","delCardTC","err","updateCardTC","sortCardsByGrade","mappedCards","c","cardContents","setCardsCurrentPageAC","Loader","ldsCircle","Learn","app","currentQuestion","setAnswer","stop","setStop","setGrade","goToPacks","qOver","disabled","options","el","ButtonGroup","variant","aria-label","Button","cardId","sendGradeTC","PATH","Routes","path","exact","render","Header","wrapper","link","activeClassName","active","ExitToApp","paddingLeft","Main","finally","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.98598e07.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const  Error404 = () => {\r\n    return (\r\n        <div>\r\n            <div>404</div>\r\n            <div>Page not found!</div>\r\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\r\n        </div>\r\n    )\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string | null\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    // const finalInputClassName = `${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n    const finalInputClassName = `${s.superInput} ${error ? s.errorInput : ''} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create(\r\n    {\r\n        baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n        withCredentials: true,\r\n    })\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me')\r\n    },\r\n    me() {\r\n        return instance.post('auth/me')\r\n    },\r\n}\r\n\r\nexport const registerAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post('/auth/register', {email, password})\r\n    }\r\n}\r\n\r\nexport const recoverPasswordAPI = {\r\n    recoverPassword(email: string, message: string) {\r\n        return instance.post('/auth/forgot', {email, message})\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post('/auth/set-new-password', {password, resetPasswordToken})\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(pageCount: number, currentPage: number, packName: string, minCardsCount: number,\r\n             maxCardsCount: number, userId: string, sortPacks: string) {\r\n        return instance\r\n            .get(`/cards/pack?pageCount=${pageCount}&sortPacks=${sortPacks}&packName=${packName}&page=${currentPage}&min=${minCardsCount}&max=${maxCardsCount}&user_id=${userId}`)\r\n    },\r\n    addPack(data: AddPackRequestDataType) {\r\n        return instance.post('/cards/pack', {cardsPack: data})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`/cards/pack?id=${id}`)\r\n    },\r\n    updatePack(packId: string, newPackName: string) {\r\n        return instance.put('/cards/pack', {\r\n            cardsPack: {_id: packId, name: newPackName}\r\n        })\r\n    },\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(cardsPack_id: string, page: number, pageCount: number, sortCards: string) {\r\n        return instance.get(`/cards/card`, {\r\n            params: {\r\n                cardsPack_id: cardsPack_id,\r\n                pageCount: pageCount,\r\n                page: page,\r\n                sortCards: sortCards,\r\n            }\r\n        })\r\n    },\r\n    addCard(data: CreateCardRequestDataType) {\r\n        return instance.post('/cards/card', {card: data})\r\n    },\r\n    deleteCard(cardsPack_id: string) {\r\n        return instance.delete(`/cards/card?id=${cardsPack_id}`)\r\n    },\r\n    updateCard(updateCardData: updateCardDataType) {\r\n        return instance.put('cards/card', {\r\n            card: {\r\n                _id: updateCardData._id,\r\n                question: updateCardData.question,\r\n                answer: updateCardData.answer,\r\n            }\r\n        })\r\n    },\r\n    sendGrade(card_id: string, grade: number) {\r\n        return instance.put('/cards/grade', {\r\n            grade: grade,\r\n            card_id: card_id\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type updateCardDataType = {\r\n    _id: string,\r\n    question: string,\r\n    answer: string\r\n}\r\n\r\nexport type CreateCardRequestDataType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    type?: string\r\n}\r\n\r\nexport type AddPackRequestDataType = {\r\n    name?: string\r\n    private?: boolean\r\n}","import {AppThunkType} from \"./store\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\nimport {authAPI} from \"../m3-dal/api\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    status\r\n} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({\r\n    type: 'APP/SET-IS-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\n//thunk\r\nexport const setIsInitializedTC = (): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.me()\r\n        .then((res) => {\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setIsLoggedInAC(true,res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n//types\r\nexport type AppActionsType = ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../m3-dal/api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    userData: {\r\n        avatar: '',\r\n        created: '',\r\n        email: '',\r\n        isAdmin: false,\r\n        name: '',\r\n        publicCardPacksCount: 0,\r\n        rememberMe: false,\r\n        token: '',\r\n        tokenDeathTime: 0,\r\n        updated: '',\r\n        verified: false,\r\n        __v: 0,\r\n        _id: '',\r\n    } || null,\r\n    isLoggedIn: false,\r\n    authError: '',\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, userData: action.userData, isLoggedIn: action.value}\r\n        case 'login/SET-IS-LOGGED-OUT':\r\n            return {...state, isLoggedIn: action.value}\r\n        case 'login/SET-AUTH-ERROR':\r\n            return {...state, authError: action.errorMessage}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n//actions\r\nexport const setIsLoggedInAC = (value: boolean, userData: UserDataResponseType) => ({\r\n    type: 'login/SET-IS-LOGGED-IN', value, userData\r\n} as const)\r\nexport const setIsLoggedOutAC = (value: boolean) => ({\r\n    type: 'login/SET-IS-LOGGED-OUT', value\r\n} as const)\r\n\r\nconst setAuthErrorAC = (errorMessage: string) => ({\r\n    type: 'login/SET-AUTH-ERROR', errorMessage\r\n} as const)\r\n\r\n//thunks\r\nexport const loginTC = (values: UserLoginData) => (dispatch: Dispatch<ActionsType>) => {\r\n\r\n    dispatch(setAppStatusAC('loading'))\r\n\r\n    authAPI.login(values.email, values.password, values.rememberMe)\r\n        .then((res) => {\r\n            dispatch(setIsLoggedInAC(true, res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : e.message\r\n            dispatch(setAuthErrorAC(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n\r\n        })\r\n}\r\n\r\nexport const logoutTC = (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        authAPI.logout().then(() => {\r\n            dispatch(setIsLoggedOutAC(false))\r\n        })\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setIsLoggedOutAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAuthErrorAC>\r\n\r\n\r\nexport type UserLoginData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type UserDataResponseType = {\r\n    avatar: string\r\n    created: string\r\n    email: string\r\n    isAdmin: boolean\r\n    name: string\r\n    publicCardPacksCount: number\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    updated: string\r\n    verified: boolean\r\n    __v: number\r\n    _id: string\r\n}","import React from 'react'\r\nimport s from '../../common/styles.module.css'\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../superComponents/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../../m2-bll/auth-reducer\";\r\nimport {useFormik} from 'formik';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport style from './Login.module.css'\r\n\r\ntype LoginErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n    const authErrorMessage = useSelector((state: AppStoreType) => state.auth.authError)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: LoginErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h2> Login </h2>\r\n\r\n            <form onSubmit={formik.handleSubmit} className={s.form}>\r\n\r\n                <SuperInputText\r\n                    type='email'\r\n                    placeholder='E-mail'\r\n                    error={formik.touched.email ? formik.errors.email : null}\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    error={formik.touched.password ? formik.errors.password : null}\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n\r\n                <br/>\r\n\r\n                <div>\r\n                    <SuperCheckbox {...formik.getFieldProps('rememberMe')}/>\r\n                    Remember me\r\n                </div>\r\n\r\n                <div className={style.authError}>\r\n                    {authErrorMessage}\r\n                </div>\r\n\r\n                <SuperButton type='submit'>\r\n                    Login\r\n                </SuperButton>\r\n            </form>\r\n\r\n            <NavLink to='/forgot-password'>Forgot Password</NavLink> <br/>\r\n            <NavLink to=\"/register\">Sign Up</NavLink>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/cloud.01bc04ad.png\";","import React from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport {Login} from \"../Login/Login\";\r\nimport cloud from '../../common/images/cloud.png';\r\nimport s from './Cloud.module.css'\r\n\r\nexport const  Profile = () => {\r\n\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n    const userName = useSelector((state: AppStoreType) => state.auth.userData?.name)\r\n    const myPacksCount = useSelector((state: AppStoreType) => state.auth.userData?.publicCardPacksCount)\r\n\r\n    let nameOnDisplay = userName ?? 'Stranger'\r\n\r\n    if (!isLoggedIn) {\r\n        return <Login />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.hello}>\r\n                <h2>Hello, {nameOnDisplay}!</h2>\r\n                <h3>You have {myPacksCount} packs</h3>\r\n\r\n                <div className={s.cloud}>\r\n                <img src={cloud} alt=\"Cloud\" />\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {registerAPI} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isRegistered: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registerReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"register/SET-SIGN-UP\":\r\n            return {...state, isRegistered: action.isRegistered}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setSignUpAC = (isRegistered: boolean) => ({\r\n    type: 'register/SET-SIGN-UP',\r\n    isRegistered\r\n} as const)\r\n\r\n//thunks\r\nexport const registerTC = (values: UserLoginData) => {\r\n    return (dispatch: Dispatch<ActionsType>) =>  {\r\n        dispatch(setAppStatusAC('loading'))\r\n        registerAPI.register(values.email, values.password)\r\n            .then(() => {\r\n                dispatch(setSignUpAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                const error = e.response ? e.response.data.error : e.message\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setSignUpAC> | ReturnType<typeof setAppStatusAC>\r\ntype UserLoginData = {\r\n    email: string\r\n    password: string\r\n}","import React from 'react'\r\nimport s from '../../common/styles.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport {registerTC} from \"../../../m2-bll/registration-reducer\";\r\n\r\ntype SignupFormErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmedPassword?: string\r\n}\r\nexport const Register = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector((state: AppStoreType) => state.register.isRegistered)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmedPassword: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: SignupFormErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address.';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be at least 8 symbols'\r\n            }\r\n            if (values.password && !values.confirmedPassword) {\r\n                errors.confirmedPassword = 'Confirm your password'\r\n            } else if (values.password !== values.confirmedPassword) {\r\n                errors.confirmedPassword = 'You entered two different passwords.'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            if (values.password === values.confirmedPassword) {\r\n                dispatch(registerTC(values))\r\n                formik.resetForm()\r\n            }\r\n        },\r\n    })\r\n\r\n    if(isRegistered) {\r\n        return <Redirect to={'./login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h1>it-incubator</h1>\r\n            <h2>Sign In</h2>\r\n            <form onSubmit={formik.handleSubmit} className={s.form}>\r\n\r\n                <SuperInputText\r\n                    type='email'\r\n                    placeholder='Email'\r\n                    error={formik.touched.email ? formik.errors.email : null}\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    error={formik.touched.password ? formik.errors.password : null}\r\n                    {...formik.getFieldProps('password')}\r\n                    //formik.getFieldProps вместо этого:\r\n                    // name='password'\r\n                    // onChange={formik.handleChange}\r\n                    // value={formik.values.password}\r\n                />\r\n\r\n                <SuperInputText\r\n                    type='password'\r\n                    placeholder='Confirm your password'\r\n                    error={formik.touched.confirmedPassword ? formik.errors.confirmedPassword : null}\r\n                    {...formik.getFieldProps('confirmedPassword')}\r\n                />\r\n                <div>\r\n                    <NavLink to='/login'><SuperButton> Cancel </SuperButton></NavLink>\r\n                    <SuperButton type={'submit'}> Register </SuperButton>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {setAppStatusAC} from \"./app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {recoverPasswordAPI} from \"../m3-dal/api\";\r\n\r\nconst initialState = {\r\n  isNewPassword: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const setNewPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'setNewPassword/SET-NEW-PASSWORD':\r\n      return {...state, isNewPassword: true}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// AC\r\nconst setNewPasswordAC = () => ({\r\n  type: 'setNewPassword/SET-NEW-PASSWORD'\r\n} as const)\r\n\r\n\r\n// Thunk\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    recoverPasswordAPI.setNewPassword(password, resetPasswordToken)\r\n    .then(() => {\r\n      dispatch(setNewPasswordAC())\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    .catch((e) => {\r\n      const error = e.response ? e.response.data.error : e.message\r\n      alert(error)\r\n    })\r\n  }\r\n}\r\n\r\n// Type\r\ntype ActionsType = ReturnType<typeof setNewPasswordAC> | ReturnType<typeof setAppStatusAC>","import React from 'react'\r\nimport s from '../common/styles.module.css'\r\nimport SuperInputText from \"../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {setNewPasswordTC} from \"../../m2-bll/setNewPassword-reducer\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../m2-bll/store\";\r\n\r\ntype SetNewPassErrorType = {\r\n  password?: string\r\n  confirmPassword?: string\r\n}\r\n\r\nexport const  NewPassword = () => {\r\n  const dispatch = useDispatch()\r\n  const newPasswordSet = useSelector((state: AppStoreType) => state.setNewPassword.isNewPassword)\r\n  const {token} = useParams<{ token: string }>()\r\n\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password: '',\r\n      confirmPassword: ''\r\n    },\r\n    validate: (values) => {\r\n      // debugger\r\n      const errors: SetNewPassErrorType = {};\r\n      if (!values.password) {\r\n        errors.password = 'Password is required'\r\n      } else if (values.password.length < 8) {\r\n        errors.password = 'Password must be at least 8 symbols'\r\n      }\r\n      if (values.password && !values.confirmPassword) {\r\n        errors.confirmPassword = 'Confirm your password'\r\n      } else if (values.password !== values.confirmPassword) {\r\n        errors.confirmPassword = 'You entered two different passwords.'\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      // debugger\r\n      if (values.password === values.confirmPassword) {\r\n        dispatch(setNewPasswordTC(values.confirmPassword, token))\r\n        formik.resetForm()\r\n      }\r\n      // dispatch(setNewPasswordTC(values.password, token))\r\n    },\r\n  });\r\n\r\n  if (newPasswordSet) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.bgr}>\r\n              <h1>it-incubator</h1>\r\n              <h2>Set new password</h2>\r\n              <form onSubmit={formik.handleSubmit} className={s.form}>\r\n                <SuperInputText\r\n                  type='password'\r\n                  placeholder='New password'\r\n                  error={formik.touched.password ? formik.errors.password : null}\r\n                  {...formik.getFieldProps('password')}\r\n                />\r\n                <SuperInputText\r\n                  type='password'\r\n                  placeholder='Confirm your new password'\r\n                  error={formik.touched.confirmPassword ? formik.errors.confirmPassword : null}\r\n                  {...formik.getFieldProps('confirmPassword')}\r\n                />\r\n                <SuperButton type={'submit'}>Set new password</SuperButton>\r\n              </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {recoverPasswordAPI} from \"../m3-dal/api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    recoveredPassword: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoverPasswordReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'recoverPassword/CHANGE-PASSWORD':\r\n            return {...state, recoveredPassword: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const recoverPasswordAC = () => ({\r\n    type: 'recoverPassword/CHANGE-PASSWORD'\r\n} as const)\r\n\r\n//thunks\r\nexport const recoverPasswordTC = (email: string, message: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        recoverPasswordAPI.recoverPassword(email, message)\r\n            .then(() => {\r\n                dispatch(recoverPasswordAC())\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((e) => {\r\n                const error = e.response ? e.response.data.error : e.message\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n// types\r\ntype ActionsType = ReturnType<typeof recoverPasswordAC> | ReturnType<typeof setAppStatusAC>","import React from 'react'\r\nimport s from '../common/styles.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {recoverPasswordTC} from \"../../m2-bll/recoverPassword-reducer\";\r\nimport SuperButton from \"../superComponents/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport SuperInputText from \"../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport {AppStoreType} from '../../m2-bll/store';\r\n\r\nexport type RecoveryFormikErrorType = {\r\n    email?: string\r\n}\r\nexport const ForgotPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const recoveredPassword = useSelector((state: AppStoreType) => state.forgotPassword.recoveredPassword)\r\n\r\n\r\n    const message = `<div style=\"background-color: lime; padding: 15px\">\r\n            password recovery link:\t<a href='https://Peleka.github.io/cards-game/#/new-password/$token$'>link</a>\r\n            </div>`\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: RecoveryFormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\"\r\n            } else if (values.email.length < 11) {\r\n                errors.email = \"Email should be more 10 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(recoverPasswordTC(values.email, message))\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={s.bgr}>\r\n            <h1>it-incubator</h1>\r\n            <h2>Forgot your password?</h2>\r\n            {!recoveredPassword\r\n                ? <div>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <SuperInputText type='email'\r\n                                        placeholder='Email'\r\n                                        {...formik.getFieldProps('email')}\r\n                        />\r\n                        <SuperButton type={'submit'}>Send instructions</SuperButton>\r\n                    </form>\r\n                </div>\r\n                : <Message email={formik.values.email}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype MessagePropsType = {\r\n    email: string\r\n}\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div>\r\n            <h4>Check your Email</h4>\r\n            <span>\r\n                click the link in the message in your email {props.email}\r\n            </span>\r\n        </div>\r\n    )\r\n}","import {AddPackRequestDataType, packsAPI} from \"../m3-dal/api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {AppThunkType} from \"./store\";\r\n\r\nconst initialState = {\r\n    cardPacks: null as null | PackResponseType[],\r\n    maxCardsCount: 6,\r\n    minCardsCount: 0,\r\n    pageCount: 8,\r\n    packId: '',\r\n    name: '',\r\n    totalPacksCount: 0,\r\n    pageSize: 10,\r\n    currentPage: 1,\r\n    userId: '',\r\n    sortPacks: '0updated' as SortPacksOptions,\r\n}\r\ntype SortPacksOptions = '0updated' | '1updated'\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const packsReducer = (state = initialState, action: PacksActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS/SET-PACKS':\r\n            return {...state, cardPacks: action.data}\r\n        case 'SET-TOTAL-PACKS-COUNT':\r\n            return {...state, totalPacksCount: action.totalPacks}\r\n        case 'SET-CURRENT-PAGE':\r\n            return {...state, currentPage: action.pageNumber}\r\n        case 'PACKS/DEL-PACK':\r\n            return state\r\n        case 'PACKS/UPDATE-PACK':\r\n            return state\r\n        case 'PACKS/SET-USER-ID':\r\n            return {...state, userId: action.userId}\r\n        case 'PACKS/SET-MIN-CARDS_COUNT':\r\n            return {...state, minCardsCount: action.minCardsCount}\r\n        case \"PACKS/SET-MAX-CARDS_COUNT\":\r\n            return {...state, maxCardsCount: action.maxCardsCount}\r\n        case \"PACKS/SET-NAME\":\r\n            return {...state, name: action.name}\r\n        case \"PACKS/SET-SORT\":\r\n            return {...state, sortPacks: action.sortValue}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setMinCardsCountAC = (minCardsCount: number) => ({type: 'PACKS/SET-MIN-CARDS_COUNT', minCardsCount,\r\n} as const)\r\nexport const setMaxCardsCountAC = (maxCardsCount: number) => ({type: 'PACKS/SET-MAX-CARDS_COUNT', maxCardsCount,\r\n} as const)\r\n\r\nexport const setPacksAC = (data: PackResponseType[]) => ({type: 'PACKS/SET-PACKS', data,} as const)\r\nconst setTotalPacksCountAC = (totalPacks: number) => ({type: 'SET-TOTAL-PACKS-COUNT', totalPacks,} as const)\r\nexport const setCurrentPageAC = (pageNumber: number) => ({type: 'SET-CURRENT-PAGE', pageNumber,} as const)\r\nexport const delPackAC = (id: string) => ({type: 'PACKS/DEL-PACK', id} as const)\r\nexport const updatePackAC = (data: UpdatePacksRequestDataType) => ({type: 'PACKS/UPDATE-PACK', data} as const)\r\nexport const setUserIdAC = (userId: string) => ({type: 'PACKS/SET-USER-ID', userId} as const)\r\nexport const setNameAC = (name: string) => ({type: 'PACKS/SET-NAME', name} as const)\r\nexport const setSortPacksAC = (sortValue: SortPacksOptions) => ({type: 'PACKS/SET-SORT', sortValue} as const)\r\n\r\n\r\n//thunk\r\nexport const getPacksTC = (): AppThunkType => (dispatch, getState) => {\r\n    // debugger\r\n    dispatch(setAppStatusAC('loading'))\r\n    const state = getState()\r\n    const currentPage = state.packs.currentPage\r\n    const packName = state.packs.name\r\n    const minCardsCount = state.packs.minCardsCount\r\n    const maxCardsCount = state.packs.maxCardsCount\r\n    const userId = state.packs.userId\r\n    const pageCount = state.packs.pageCount\r\n    const sortPacks = state.packs.sortPacks\r\n\r\n    packsAPI.getPacks(pageCount, currentPage, packName, minCardsCount, maxCardsCount, userId, sortPacks)\r\n        .then(res => {\r\n            dispatch(setTotalPacksCountAC(res.data.cardPacksTotalCount))\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('get packs error')\r\n        })\r\n}\r\n\r\nexport const addPackTC = (data: AddPackRequestDataType): AppThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.addPack(data)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            console.log('pack added successfully')\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('add pack error')\r\n        })\r\n}\r\n\r\nexport const delPackTC = (id: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.deletePack(id)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(getPacksTC())\r\n            console.log('pack deleted successfully')\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('delete pack error')\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (packId: string, newPackName: string): AppThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.updatePack(packId, newPackName)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            console.log('pack updated successfully')\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('update pack error')\r\n        })\r\n}\r\n\r\n//types\r\nexport type PacksActionsType = ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setTotalPacksCountAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof delPackAC>\r\n    | ReturnType<typeof updatePackAC>\r\n    | ReturnType<typeof setUserIdAC>\r\n    | ReturnType<typeof setMinCardsCountAC>\r\n    | ReturnType<typeof setMaxCardsCountAC>\r\n    | ReturnType<typeof setNameAC>\r\n    | ReturnType<typeof setSortPacksAC>\r\n\r\nexport type GetPacksRequestDataType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: number\r\n    page?: number\r\n    pageCount?: string\r\n    user_id?: string\r\n}\r\n\r\nexport type PackResponseType = {\r\n    \"_id\": string,\r\n    \"user_id\": string,\r\n    \"user_name\": string,\r\n    \"private\": boolean,\r\n    \"name\": string,\r\n    \"path\": string,\r\n    \"grade\": number,\r\n    \"shots\": number,\r\n    \"cardsCount\": number,\r\n    \"type\": string,\r\n    \"rating\": number,\r\n    \"created\": string,\r\n    \"updated\": string,\r\n    \"more_id\": string,\r\n    \"__v\": number,\r\n}\r\n\r\nexport type UpdatePacksRequestDataType = {\r\n    _id: string\r\n    name?: string\r\n    private?: boolean\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport SuperInputText from '../../../superComponents/c1-SuperInputText/SuperInputText';\r\nimport SuperButton from '../../../superComponents/c2-SuperButton/SuperButton';\r\nimport s from '../Modal.module.css';\r\n\r\ntype ModalForPacksPropsType = {\r\n  closeAddEditPackModal: () => void\r\n  addNewPack: (name: string) => void\r\n  titlePack?: string\r\n}\r\n\r\nexport const ModalForPacks = (props: ModalForPacksPropsType) => {\r\n  const [newText, setNewText] = useState(props.titlePack ? props.titlePack: '')\r\n\r\n  const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setNewText(e.currentTarget.value)\r\n  }\r\n\r\n  const onClickHandler = () => {\r\n    props.addNewPack(newText)\r\n    props.closeAddEditPackModal()\r\n  }\r\n\r\n  const onClosedClick = () => {\r\n    props.closeAddEditPackModal()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={s.wrapperModal}>\r\n        <div className={s.modal}>\r\n          <h3>Enter new pack name</h3>\r\n          <form>\r\n            <SuperInputText\r\n              type='text'\r\n              value={newText}\r\n              onChange={inputChangeHandler}\r\n            />\r\n            <div className={s.buttonBlock}>\r\n              <SuperButton type='submit' onClick={onClickHandler}>Ok</SuperButton>\r\n              <SuperButton onClick={onClosedClick}>Cancel</SuperButton>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}","import s from '../Modal.module.css';\r\nimport React from \"react\";\r\nimport SuperButton from \"../../../superComponents/c2-SuperButton/SuperButton\";\r\n\r\ntype ModalDeletePropsType = {\r\n    closeDeleteModal: () => void\r\n    deleteItem: () => void\r\n    title: string\r\n}\r\n\r\nexport const ModalDeleteItem = (props: ModalDeletePropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.deleteItem()\r\n        props.closeDeleteModal()\r\n    }\r\n\r\n    const onClosedClick = () => {\r\n        props.closeDeleteModal()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.wrapperModal}>\r\n                <div className={s.modal}>\r\n                    <h3 style={{color: 'darkred'}}>{props.title}</h3>\r\n                    <form>\r\n                        <div className={s.buttonBlock}>\r\n                            <SuperButton type='submit' onClick={onClickHandler}>Ok</SuperButton>\r\n                            <SuperButton onClick={onClosedClick}>Cancel</SuperButton>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport s from './Pack.module.css'\r\nimport {PackResponseType} from \"../../../../m2-bll/packs-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {green} from \"@material-ui/core/colors\";\r\nimport {ModalForPacks} from \"../../Modal/ModalPacks/ModalForPacks\";\r\nimport {ModalDeleteItem} from \"../../Modal/ModalDelete/ModalDeleteItem\";\r\nimport SchoolIcon from '@material-ui/icons/School';\r\n\r\nexport const Pack: React.FC<PackPropsType> = React.memo((props ) => {\r\n\r\n    const updateTime = new Date(props.updated).toLocaleDateString(['ban', 'id'])\r\n\r\n    const delPack = () => {\r\n        props.delPack(props._id)\r\n    }\r\n    const updatePack = (newPackName: string) => {\r\n        props.updatePack(props._id, newPackName)\r\n    }\r\n\r\n\r\n    // Update pack modal\r\n    const [editPackModal, setEditPackModal] = useState<boolean>(false);\r\n    const openAddEditPackModal = () => {\r\n        setEditPackModal(true)\r\n    }\r\n    const closeAddEditPackModal = () => {\r\n        setEditPackModal(false)\r\n    }\r\n\r\n    // Delete pack modal\r\n    const [deletePackModal, setDeletePackModal] = useState<boolean>(false);\r\n    const openDeletePackModal = () => {\r\n        setDeletePackModal(true)\r\n    }\r\n    const closeDeletePackModal = () => {\r\n        setDeletePackModal(false)\r\n    }\r\n\r\n    // ОнКлик на кнопку Edit\r\n    // const updatePack = () => {\r\n    //   props.updatePacks(props.updatePacks.cardsPack)\r\n    // }\r\n    return (\r\n        <div className={s.packItem}>\r\n            <div className={s.packSpecification}>{props.user_name}</div>\r\n            <div className={s.packSpecification}>{props.name}</div>\r\n            <div className={s.packSpecification}>{props.cardsCount}</div>\r\n            <div className={s.packSpecification}>{updateTime}</div>\r\n            <div className={s.packSpecification}>\r\n                <NavLink to={`/cards/${props._id}`} className={s.cardsLink}>cards</NavLink></div>\r\n            <div className={s.packSpecification}>\r\n                <NavLink to={`/learn/${props._id}`}>\r\n                <span style={{cursor: 'pointer'}}><SchoolIcon /></span>\r\n            </NavLink>\r\n            </div>\r\n\r\n            <div className={s.packSpecification}>\r\n                { props.user_id === props.currentUserId ? <span style={{cursor: 'pointer'}}><EditIcon onClick={openAddEditPackModal} style={{ color: green[500] }}/></span> : ''}\r\n            </div>\r\n            <div className={s.packSpecification}>\r\n                { props.user_id === props.currentUserId ? <span style={{cursor: 'pointer'}}><DeleteIcon onClick={openDeletePackModal} color='secondary'/></span> : ''}\r\n            </div>\r\n\r\n            {editPackModal && <ModalForPacks\r\n                closeAddEditPackModal={closeAddEditPackModal}\r\n                addNewPack={updatePack}\r\n                titlePack={props.name}\r\n            />}\r\n\r\n            {deletePackModal && <ModalDeleteItem\r\n                closeDeleteModal={closeDeletePackModal}\r\n                deleteItem={delPack}\r\n                title={`Are you sure you want to delete pack '${props.name}'?`}\r\n            />}\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\n//types\r\ntype PackPropsType = PackResponseType &\r\n    {\r\n        updatePack: (packId: string, newPackName: string) => void\r\n        delPack: (id: string) => void\r\n        currentUserId: string\r\n    }","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Pagination} from '@material-ui/lab';\r\nimport {\r\n    addPackTC,\r\n    delPackTC,\r\n    getPacksTC,\r\n    setCurrentPageAC,\r\n    setMaxCardsCountAC,\r\n    setMinCardsCountAC, setNameAC, setSortPacksAC,\r\n    setUserIdAC,\r\n    updatePackTC\r\n} from \"../../../m2-bll/packs-reducer\";\r\nimport {Pack} from \"./Pack/Pack\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport st from './Packs.module.css'\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {Login} from \"../Login/Login\";\r\nimport {ModalForPacks} from \"../Modal/ModalPacks/ModalForPacks\";\r\nimport {Slider} from \"@material-ui/core\";\r\nimport SuperInputText from \"../../superComponents/c1-SuperInputText/SuperInputText\";\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n\r\nexport const Packs: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {cardPacks, totalPacksCount, pageSize, currentPage, minCardsCount, maxCardsCount, sortPacks}\r\n        = useSelector((state: AppStoreType) => state.packs)\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n    const _id = useSelector((state: AppStoreType) => state.auth.userData._id)\r\n\r\n    const [myPacks, setMyPacks] = useState(false)\r\n    const [searchText, setSearchText] = useState('')\r\n\r\n    const activeMyPacksButton = myPacks ? `${st.activeButton}` : ''\r\n    const activeAllPacksButton = !myPacks ? `${st.activeButton}` : ''\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacksTC())\r\n    }, [dispatch, minCardsCount, maxCardsCount])\r\n\r\n    // add pack modal\r\n    const [addPackModal, setAddPackModal] = useState<boolean>(false);\r\n    const openAddEditPackModal = () => {\r\n        setAddPackModal(true)\r\n    }\r\n    const closeAddEditPackModal = () => {\r\n        setAddPackModal(false)\r\n    }\r\n\r\n    //add/del/update packs\r\n    const addPack = (newPackName: string) => {\r\n        dispatch(addPackTC({name: newPackName}))\r\n    }\r\n    const delPack = useCallback(function (id: string) {\r\n        dispatch(delPackTC(id))\r\n    }, [dispatch])\r\n    const updatePack = useCallback(function (packId: string, newPackName: string) {\r\n        dispatch(updatePackTC(packId, newPackName))\r\n    }, [dispatch])\r\n\r\n\r\n    //sort\r\n    const sortByLastUpdate = () => {\r\n        dispatch(setSortPacksAC('0updated'))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const sortByFirstUpdate = () => {\r\n        dispatch(setSortPacksAC('1updated'))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const sortPacksByUpdate = sortPacks === '1updated'\r\n        ? <span style={{cursor: 'pointer'}}><ArrowDownwardIcon onClick={sortByLastUpdate} color='primary' /></span>\r\n        : <span style={{cursor: 'pointer'}}><ArrowUpwardIcon onClick={sortByFirstUpdate} color='primary'/></span>\r\n\r\n\r\n    //my/all packs\r\n    const showMyPacks = () => {\r\n        dispatch(setUserIdAC(_id))\r\n        dispatch(getPacksTC())\r\n        setMyPacks(true)\r\n    }\r\n    const showAllPacks = () => {\r\n        dispatch(setUserIdAC(''))\r\n        dispatch(getPacksTC())\r\n        setMyPacks(false)\r\n    }\r\n\r\n    //onChangeSlider\r\n    const onChangeSlider = (event: ChangeEvent<{}>, newValue: number | number[]) => {\r\n        if (newValue instanceof Array) {\r\n            dispatch(setMinCardsCountAC(newValue[0]))\r\n            dispatch(setMaxCardsCountAC(newValue[1]))\r\n        }\r\n    }\r\n\r\n    //search\r\n    const onSearchChangeHandler = (value: string) => setSearchText(value)\r\n    const search = () => {\r\n        dispatch(setNameAC(searchText))\r\n        dispatch(getPacksTC())\r\n        setSearchText('')\r\n        dispatch(setNameAC(''))\r\n    }\r\n\r\n    //pagination\r\n    let pages = []\r\n    let pagesCount = Math.ceil(totalPacksCount / pageSize)\r\n    for (let i = 1; i <= pagesCount; i++) pages.push(i)\r\n    const onPageChangedHandler = (p: number) => {\r\n        dispatch(setCurrentPageAC(p))\r\n        dispatch(getPacksTC())\r\n    }\r\n\r\n    //list of packs\r\n    const mappedPacks = cardPacks && cardPacks.map((p, i) => <Pack\r\n        key={i}\r\n        {...p}\r\n        delPack={delPack}\r\n        updatePack={updatePack}\r\n        currentUserId={_id}\r\n    />)\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Login/>\r\n    }\r\n    console.log('Packs render')\r\n    return (\r\n        <div>\r\n            <div className={st.title}>\r\n                <h1>Packs</h1>\r\n            </div>\r\n            <div className={st.packsContainer}>\r\n\r\n                <div className={st.packsField}>\r\n                    <div className={st.packContents}>\r\n                        <div>username</div>\r\n                        <div>name</div>\r\n                        <div>count</div>\r\n\r\n                        <div>{sortPacksByUpdate}</div>\r\n                        <div>update</div>\r\n                        <div><SuperButton onClick={openAddEditPackModal}>add</SuperButton>\r\n\r\n\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n                        {mappedPacks}\r\n                    </div>\r\n                </div>\r\n\r\n                {addPackModal && <ModalForPacks\r\n                    closeAddEditPackModal={closeAddEditPackModal}\r\n                    addNewPack={addPack}\r\n                    titlePack='new pack name'\r\n                />}\r\n\r\n                <div className={st.sidebar}>\r\n\r\n                    <div className={st.showMyAllPacks}>\r\n                        <span className={activeMyPacksButton}>\r\n                        <SuperButton onClick={showMyPacks}> my packs </SuperButton> </span>\r\n\r\n                        <span className={activeAllPacksButton}>\r\n                        <SuperButton onClick={showAllPacks}> all packs </SuperButton> </span>\r\n                    </div>\r\n\r\n                    <div className={st.filterByCardsCount}>\r\n                        <Slider\r\n                            style={{margin: '0', padding: '0'}}\r\n                            value={[minCardsCount, maxCardsCount]}\r\n                            onChangeCommitted={onChangeSlider}\r\n                            valueLabelDisplay=\"auto\"\r\n                            aria-labelledby=\"range-slider\"\r\n                            name='cards count'\r\n                            min={0}\r\n                            max={20}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={st.search}>\r\n                        <SuperInputText\r\n                            onChangeText={onSearchChangeHandler}\r\n                            onEnter={search}\r\n                            placeholder='search packs'\r\n                            value={searchText}/>\r\n                        <SearchIcon onClick={search}/>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className={st.paginator}>\r\n                <Pagination count={pagesCount}\r\n                            boundaryCount={1}\r\n                            defaultPage={1}\r\n                            page={currentPage}\r\n                            onChange={(e: ChangeEvent<any>, p: number) => onPageChangedHandler(p)}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from 'react';\r\nimport SuperInputText from '../../../superComponents/c1-SuperInputText/SuperInputText';\r\nimport s from '../Modal.module.css';\r\nimport SuperButton from \"../../../superComponents/c2-SuperButton/SuperButton\";\r\n\r\ntype ModalForCardsPropsType = {\r\n  closeAddEditCardModal: () => void\r\n  addNewCard: (question: string, answer: string) => void\r\n  title: string\r\n  questionPlaceholder: string\r\n  answerPlaceholder: string\r\n}\r\n\r\nexport const ModalForCards = (props: ModalForCardsPropsType) => {\r\n  const [question, setQuestion] = useState(props.questionPlaceholder)\r\n  const [answer, addQuestion] = useState(props.answerPlaceholder)\r\n\r\n  const inputChangeHandlerQuestion = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setQuestion(e.currentTarget.value)\r\n  }\r\n\r\n  const inputChangeHandlerAnswer = (e: ChangeEvent<HTMLInputElement>) => {\r\n    addQuestion(e.currentTarget.value)\r\n  }\r\n\r\n  const onClickHandler = () => {\r\n    props.addNewCard(question, answer)\r\n    props.closeAddEditCardModal()\r\n  }\r\n\r\n  const onClosedClick = () => {\r\n    props.closeAddEditCardModal()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={s.wrapperModal}>\r\n        <div className={s.modal}>\r\n          <h3>{props.title}</h3>\r\n          <form>\r\n            <SuperInputText\r\n              type='text'\r\n              value={question}\r\n              onChange={inputChangeHandlerQuestion}\r\n            />\r\n            <SuperInputText\r\n              type='text'\r\n              value={answer}\r\n              onChange={inputChangeHandlerAnswer}\r\n            />\r\n            <div className={s.buttonBlock}>\r\n              <SuperButton type='submit' onClick={onClickHandler}>Ok</SuperButton>\r\n              <SuperButton onClick={onClosedClick}>Cancel</SuperButton>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React, {useState} from \"react\";\r\nimport s from './Card.module.css'\r\nimport {CardDataType} from \"../../../../m2-bll/cards-reducer\";\r\nimport {updateCardDataType} from \"../../../../m3-dal/api\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {green} from \"@material-ui/core/colors\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport {ModalForCards} from \"../../Modal/ModalCards/ModalForCards\";\r\nimport {ModalDeleteItem} from \"../../Modal/ModalDelete/ModalDeleteItem\";\r\n\r\ntype CardPropsType = CardDataType & {\r\n    delCard: (id: string, packId: string) => void\r\n    updateCard: (updateCard: updateCardDataType) => void\r\n    packId: string\r\n    currentUserId: string\r\n}\r\n\r\nexport const Card = (props: CardPropsType) => {\r\n\r\n\r\n    const deleteCardHandler = () => props._id && props.delCard(props._id, props.packId)\r\n    const updateCardHandler = (question: string, answer: string) =>\r\n        props.updateCard({_id: props._id, question, answer})\r\n\r\n    const update = new Date(props.updated).toLocaleDateString(['ban', 'id']);\r\n\r\n    // Update card modal\r\n    const [editCardModal, setEditCardsModal] = useState<boolean>(false);\r\n    const openAddEditCardModal = () => {\r\n        setEditCardsModal(true)\r\n    }\r\n    const closeAddEditCardModal = () => {\r\n        setEditCardsModal(false)\r\n    }\r\n\r\n    // Delete pack modal\r\n    const [deleteCardModal, setDeleteCardModal] = useState<boolean>(false);\r\n    const openDeleteCardModal = () => {\r\n        setDeleteCardModal(true)\r\n    }\r\n    const closeDeleteCardModal = () => {\r\n        setDeleteCardModal(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.cardItem}>\r\n            <div className={s.cardSpecification}>{props.question}</div>\r\n            <div className={s.cardSpecification}>{props.answer}</div>\r\n            <div className={s.cardSpecification}>{props.grade}</div>\r\n            <div className={s.cardSpecification}>{update}</div>\r\n            <div className={s.cardSpecification}>\r\n                {props.user_id === props.currentUserId ? <span style={{cursor: 'pointer'}}><EditIcon onClick={openAddEditCardModal} style={{ color: green[500] }}/></span> : ''}\r\n            </div>\r\n            <div className={s.cardSpecification}>\r\n                { props.user_id === props.currentUserId ? <span style={{cursor: 'pointer'}}><Delete onClick={openDeleteCardModal} color='secondary'/></span> : ''}\r\n            </div>\r\n\r\n            {editCardModal && <ModalForCards\r\n                addNewCard={updateCardHandler}\r\n                closeAddEditCardModal={closeAddEditCardModal}\r\n                title='Edit your card'\r\n                questionPlaceholder={props.question}\r\n                answerPlaceholder={props.answer}\r\n            />}\r\n\r\n            {deleteCardModal && <ModalDeleteItem\r\n                closeDeleteModal={closeDeleteCardModal}\r\n                deleteItem={deleteCardHandler}\r\n                title={`Are you sure you want to delete card '${props.question}'?`}\r\n            />}\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n","import {setAppStatusAC} from \"./app-reducer\";\r\nimport {cardsAPI, CreateCardRequestDataType, updateCardDataType} from \"../m3-dal/api\";\r\nimport {AppThunkType} from \"./store\";\r\n\r\nconst initialState = {\r\n    cards: [] as Array<CardDataType>,\r\n    packUserId: '',\r\n    page: 1,\r\n    pageCount: 4,\r\n    cardsTotalCount: 0,\r\n    minGrade: 0,\r\n    maxGrade: 6,\r\n    sortCards: '0grade' as SortCardsOptions,\r\n}\r\n\r\ntype SortCardsOptions = '0grade' | '1grade'\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: CardsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"CARDS/SET-CARDS\":\r\n            return {...state, cards: action.cards}\r\n        case \"CARDS/SET_CARDS_TOTAL_COUNT\":\r\n            return {...state, cardsTotalCount: action.totalCards}\r\n        case \"CARDS/SET_CURRENT_PAGE\":\r\n            return {...state, page: action.page}\r\n        case \"CARDS/SET-SORT\":\r\n            return {...state, sortCards: action.sortValue}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setCardsAC = (cards: CardDataType[]) => ({type: 'CARDS/SET-CARDS', cards} as const)\r\nexport const setCardsTotalCountAC = (totalCards: number) => ({type: 'CARDS/SET_CARDS_TOTAL_COUNT', totalCards} as const)\r\nexport const setCardsCurrentPageAC = (page: number) => ({type: 'CARDS/SET_CURRENT_PAGE', page} as const)\r\nexport const setSortCardsAC = (sortValue: SortCardsOptions) => ({type: 'CARDS/SET-SORT', sortValue} as const)\r\n\r\n\r\n//thunk\r\nexport const getCardsTC = (cardsPack_id: string): AppThunkType => (dispatch, getState) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const state = getState()\r\n    const page = state.cards.page\r\n    const pageCount = state.cards.pageCount\r\n    const sortCards = state.cards.sortCards\r\n    cardsAPI.getCards(cardsPack_id, page, pageCount, sortCards)\r\n        .then(res => {\r\n            dispatch(setCardsTotalCountAC(res.data.cardsTotalCount))\r\n            dispatch(setCardsAC(res.data.cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('get cards error')\r\n        })\r\n}\r\n\r\nexport const addCardTC = (data: CreateCardRequestDataType): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.addCard(data)\r\n        .then(() => {\r\n            dispatch(getCardsTC(data.cardsPack_id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.res ? e.res.data.error : (`Add card failed: ${e.message}.`)\r\n            dispatch(setAppStatusAC('failed'))\r\n            alert(error)\r\n        })\r\n}\r\n\r\nexport const delCardTC = (id: string, packId: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.deleteCard(id)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(getCardsTC(packId))\r\n            console.log('card deleted successfully')\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('failed'))\r\n            console.log('delete card error')\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (packId: string, updateCardData: updateCardDataType): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.updateCard(updateCardData)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error\r\n                : (err.message + ' , error')\r\n            dispatch(setAppStatusAC('failed'))\r\n            alert(error)\r\n        })\r\n}\r\n\r\nexport const sendGradeTC = (cardId: string, grade: number): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.sendGrade(cardId, grade)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error\r\n                : (err.message + ' , error')\r\n            dispatch(setAppStatusAC('failed'))\r\n            alert(error)\r\n        })\r\n}\r\n\r\n//types\r\nexport type CardsActionsType = ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setCardsTotalCountAC>\r\n    | ReturnType<typeof setCardsCurrentPageAC>\r\n    | ReturnType<typeof setSortCardsAC>\r\n\r\n// export type GetCardsRequestDataType = {\r\n//     cardAnswer?: string\r\n//     cardQuestion?: string\r\n//     cardsPack_id: string\r\n//     min?: number\r\n//     max?: number\r\n//     sortCards?: number\r\n//     page?: number\r\n//     pageCount?: number\r\n// }\r\n\r\nexport type CardDataType = {\r\n    cardsPack_id: string\r\n    answer: string\r\n    comments?: string\r\n    created?: string\r\n    grade?: number\r\n    more_id?: string\r\n    question: string\r\n    questionImg?: string\r\n    rating?: number\r\n    shots?: number\r\n    type?: string\r\n    updated: string\r\n    user_id?: string\r\n    __v?: number\r\n    _id: string\r\n}","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\"\r\nimport st from \"./Cards.module.css\"\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {Card} from \"./Card/Card\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport {\r\n    addCardTC,\r\n    delCardTC,\r\n    getCardsTC,\r\n    setCardsCurrentPageAC,\r\n    setSortCardsAC,\r\n    updateCardTC\r\n} from \"../../../m2-bll/cards-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Login} from \"../Login/Login\";\r\nimport {updateCardDataType} from \"../../../m3-dal/api\";\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport {Pagination} from \"@material-ui/lab\";\r\nimport {ModalForCards} from \"../Modal/ModalCards/ModalForCards\";\r\n\r\n\r\n\r\nexport const Cards = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {cards, cardsTotalCount, pageCount, sortCards, page} = useSelector((state: AppStoreType) => state.cards)\r\n    const {packID} = useParams<{ packID: string }>()\r\n    const isLoggedIn = useSelector((state: AppStoreType) => state.auth.isLoggedIn)\r\n    const _id = useSelector((state: AppStoreType) => state.auth.userData._id)\r\n    const packUserId = useSelector((state: AppStoreType) => state.packs.userId)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(packID))\r\n    }, [dispatch, packID])\r\n\r\n\r\n    // Add card modal\r\n    const [addCardModal, setAddCardsModal] = useState<boolean>(false);\r\n    const openAddEditCardModal = () => {\r\n        setAddCardsModal(true)\r\n    }\r\n    const closeAddEditCardModal = () => {\r\n        setAddCardsModal(false)\r\n    }\r\n\r\n    //add/del/update card\r\n    const addCardHandler = (question: string, answer: string) => {\r\n        dispatch(addCardTC({cardsPack_id: packID, question: question, answer: answer}))\r\n    }\r\n    const delCard = useCallback((id: string, packId: string) => {\r\n        dispatch(delCardTC(id, packId))\r\n    }, [dispatch])\r\n    const updateCard = useCallback((updateCardData: updateCardDataType) => {\r\n        dispatch(updateCardTC(packID, updateCardData))\r\n    }, [dispatch])\r\n\r\n\r\n    //pagination\r\n    let pages = []\r\n    let pagesCount = Math.ceil(cardsTotalCount / pageCount)\r\n    for (let i = 1; i <= pagesCount; i++) pages.push(i)\r\n    const onPageChangedHandler = (p: number) => {\r\n        dispatch(setCardsCurrentPageAC(p))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n\r\n    //sort\r\n    const sortByGradeUp = () => {\r\n        dispatch(setSortCardsAC('0grade'))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n    const sortByGradeDown = () => {\r\n        dispatch(setSortCardsAC('1grade'))\r\n        dispatch(getCardsTC(packID))\r\n    }\r\n    const sortCardsByGrade = sortCards === '0grade'\r\n        ? <span style={{cursor: 'pointer'}}><ArrowDownwardIcon onClick={sortByGradeDown} color='primary' /></span>\r\n        : <span style={{cursor: 'pointer'}}><ArrowUpwardIcon onClick={sortByGradeUp} color='primary' /></span>\r\n\r\n    //cards list\r\n    const mappedCards = cards && cards.map((c, i) => <Card\r\n        key={i}\r\n        {...c}\r\n        packId={packID}\r\n        delCard={delCard}\r\n        updateCard={updateCard}\r\n        currentUserId={_id}\r\n    />)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Login/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h1>Cards</h1>\r\n            </div>\r\n\r\n            {addCardModal && <ModalForCards\r\n                addNewCard={addCardHandler}\r\n                closeAddEditCardModal={closeAddEditCardModal}\r\n                title='Add new card'\r\n                questionPlaceholder='question'\r\n                answerPlaceholder='answer'\r\n            />}\r\n\r\n            <div className={st.cardContents}>\r\n                <div>question</div>\r\n                <div>answer</div>\r\n                <div>{sortCardsByGrade}</div>\r\n                <div>grade</div>\r\n                <div>last update</div>\r\n                <div>\r\n                    {_id === packUserId ? <SuperButton onClick={openAddEditCardModal}>add</SuperButton> : ''}\r\n                </div>\r\n            </div>\r\n            {mappedCards}\r\n            <div className={st.paginator}>\r\n                <Pagination\r\n                    count={pagesCount}\r\n                    boundaryCount={1}\r\n                    defaultPage={1}\r\n                    page={page}\r\n                    onChange={(e: ChangeEvent<any>, p: number) => onPageChangedHandler(p)}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Loader.module.css';\r\n\r\nexport const Loader = () => {\r\n    return <div className={s.ldsCircle}>\r\n        <div></div>\r\n    </div>\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {NavLink, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../m2-bll/app-reducer\";\r\nimport {CardDataType, getCardsTC, sendGradeTC} from \"../../../m2-bll/cards-reducer\";\r\nimport SuperButton from \"../../superComponents/c2-SuperButton/SuperButton\";\r\nimport {Loader} from \"../../superComponents/Loader/Loader\";\r\nimport {Button, ButtonGroup} from \"@material-ui/core\";\r\nimport s from './Learn.module.css'\r\n\r\nexport const Learn = () => {\r\n    const {packID} = useParams<{ packID: string }>()\r\n    const dispatch = useDispatch()\r\n\r\n    const cards = useSelector<AppStoreType, Array<CardDataType>>((state) => state.cards.cards)\r\n    const status = useSelector<AppStoreType, RequestStatusType>((state) => state.app.status)\r\n\r\n    const grades = ['не знал', 'забыл', 'долго думал', 'перепутал', 'знал'];\r\n\r\n    const [currentQuestion, setQuestion] = useState(0)\r\n    const [answer, setAnswer] = useState(false)\r\n    const [stop, setStop] = useState(false)\r\n    const [grade, setGrade] = useState(0)\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(packID))\r\n    }, [dispatch, packID])\r\n\r\n    const nextQuestion = () => {\r\n        if (cards.length !== currentQuestion + 1) {\r\n            setQuestion(currentQuestion + 1)\r\n        } else {\r\n            setStop(true)\r\n        }\r\n        dispatch(sendGradeTC(cards[currentQuestion]._id, grade))\r\n        setAnswer(false)\r\n        setGrade(0)\r\n    }\r\n\r\n    const setAnswerHandler = () => {\r\n        setAnswer(true)\r\n    }\r\n\r\n    const rollbackHandler = () => {\r\n        setQuestion(0)\r\n        setStop(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {status === 'loading' && <Loader/>}\r\n            <div className={s.goToPacks}>\r\n                <NavLink\r\n                    to={'/packs'}>\r\n                    🔙 back to Packs\r\n                </NavLink>\r\n            </div>\r\n            {\r\n                cards.length === 0\r\n                    ? <div>\r\n                        <span>There are no cards in this pack...</span>\r\n                    </div>\r\n                    : <div>\r\n                        {stop\r\n                            ? <div>\r\n                                <div className={s.qOver}>The questions are over</div>\r\n                                <SuperButton onClick={rollbackHandler}>Start over</SuperButton>\r\n                            </div>\r\n                            : <>\r\n                                <div className={s.question}>\r\n                                    Question: {cards[currentQuestion].question}\r\n                                </div>\r\n                                <SuperButton onClick={setAnswerHandler} disabled={answer}>CHECK</SuperButton>\r\n                                {\r\n                                    answer && (\r\n                                        <div>\r\n                                            <div className={s.answer}>Answer: {cards[currentQuestion].answer}</div>\r\n                                            <div className={s.options}>\r\n                                                {grades.map((el, i) => {\r\n                                                    const settingGrades = () => {\r\n                                                        setGrade(i + 1)\r\n                                                    }\r\n                                                    return (\r\n\r\n                                                        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n\r\n\r\n                                                        <Button\r\n                                                            key={i + 1}\r\n                                                            onClick={settingGrades}\r\n                                                            disabled={i + 1 === grade}\r\n                                                        >\r\n                                                            {el}\r\n                                                        </Button>\r\n                                                        </ButtonGroup>\r\n                                                    )\r\n                                                })}\r\n                                            </div>\r\n                                            <SuperButton onClick={nextQuestion}>NEXT</SuperButton>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </>\r\n                        }\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Error404} from \"../components/Error404\";\r\nimport {Login} from \"../components/Login/Login\";\r\nimport {Profile} from \"../components/Profile/Profile\";\r\nimport {Register} from \"../components/Registration/Register\";\r\nimport {NewPassword} from \"../components/NewPassword\";\r\nimport {ForgotPassword} from \"../components/ForgotPassword\";\r\n\r\nimport {Packs} from \"../components/Packs/Packs\";\r\nimport {Cards} from \"../components/Cards/Cards\";\r\nimport {Learn} from \"../components/Learn/Learn\";\r\n\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/register',\r\n    PROFILE: '/profile',\r\n    FORGOT_PASSWORD: '/forgot-password',\r\n    NEW_PASSWORD: '/new-password',\r\n    PACKS: '/packs',\r\n    CARDS: '/cards/:packID',\r\n    LEARN: '/learn/:packID',\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.FORGOT_PASSWORD} render={() => <ForgotPassword/>}/>\r\n                <Route path={PATH.NEW_PASSWORD + '/:token?'} render={() => <NewPassword/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={PATH.CARDS} render={() => <Cards/>}/>\r\n                <Route path={PATH.LEARN} render={() => <Learn/>}/>\r\n\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {PATH} from \"../routes/Routes\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logoutTC} from \"../../m2-bll/auth-reducer\";\r\nimport {ExitToApp} from \"@material-ui/icons\";\r\n\r\nexport const Header = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.wrapper}>\r\n                <NavLink to={PATH.REGISTER} className={s.link} activeClassName={s.active}>Sign up</NavLink>\r\n                <NavLink to={PATH.LOGIN} className={s.link} activeClassName={s.active}>Login</NavLink>\r\n                <NavLink to={PATH.PROFILE} className={s.link} activeClassName={s.active}>Profile</NavLink>\r\n                <NavLink to={PATH.PACKS} className={s.link} activeClassName={s.active}>Packs</NavLink>\r\n                <span style={{cursor: 'pointer'}}><ExitToApp style={{paddingLeft: '50px'}} onClick={() => dispatch(logoutTC)} /></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport {Header} from \"./m1-ui/header/Header\";\r\nimport {Routes} from \"./m1-ui/routes/Routes\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {AppStoreType} from \"./m2-bll/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setIsInitializedTC} from \"./m2-bll/app-reducer\";\r\nimport {Loader} from \"./m1-ui/superComponents/Loader/Loader\";\r\n\r\nexport const Main = () => {\r\n\r\n    const isInitialized = useSelector<AppStoreType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setIsInitializedTC())\r\n    }, [dispatch])\r\n\r\n    if(!isInitialized){\r\n        return <Loader />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HashRouter>\r\n                <Header/>\r\n                <Routes/>\r\n            </HashRouter>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Main} from \"./n1-main/Main\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"./n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"./n1-main/m2-bll/app-reducer\";\r\nimport {Loader} from \"./n1-main/m1-ui/superComponents/Loader/Loader\";\r\n\r\nconst App = () => {\r\n    const status = useSelector<AppStoreType, RequestStatusType>(state => state.app.status)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        {status === 'loading' && <Loader />}\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {registerReducer} from \"./registration-reducer\";\r\nimport {AppActionsType, appReducer} from \"./app-reducer\";\r\nimport {recoverPasswordReducer} from \"./recoverPassword-reducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPassword-reducer\";\r\nimport {PacksActionsType, packsReducer} from \"./packs-reducer\";\r\nimport {CardsActionsType, cardsReducer} from \"./cards-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    app: appReducer,\r\n    forgotPassword: recoverPasswordReducer,\r\n    setNewPassword: setNewPasswordReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n});\r\nexport type AppActions = PacksActionsType | CardsActionsType | AppActionsType\r\nexport type AppThunkType<ReturnType= void> = ThunkAction<ReturnType, AppStoreType, unknown, AppActions>\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store; // for dev\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from \"./n1-main/m2-bll/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <React.StrictMode>\r\n            <App/>\r\n        </React.StrictMode>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperModal\":\"Modal_wrapperModal__1yMGZ\",\"modal\":\"Modal_modal__2qJfM\",\"buttonBlock\":\"Modal_buttonBlock__TC32j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packContents\":\"Packs_packContents__1T4hR\",\"packsContainer\":\"Packs_packsContainer__25pTo\",\"packsField\":\"Packs_packsField__2bPHj\",\"sidebar\":\"Packs_sidebar__1XWlK\",\"title\":\"Packs_title__3AHgh\",\"showMyAllPacks\":\"Packs_showMyAllPacks__1Eu_N\",\"filterByCardsCount\":\"Packs_filterByCardsCount__1WG3l\",\"paginator\":\"Packs_paginator__2y9Yz\",\"filter\":\"Packs_filter__3sdg0\",\"activeButton\":\"Packs_activeButton__8lVaX\",\"search\":\"Packs_search__2DAvM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgr\":\"styles_bgr__3WPbN\",\"form\":\"styles_form__ynavo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packItem\":\"Pack_packItem__1sY46\",\"packSpecification\":\"Pack_packSpecification__3K5dZ\",\"cardsLink\":\"Pack_cardsLink__1XE3-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__15i8W\",\"link\":\"Header_link__34nbm\",\"active\":\"Header_active__IYuL5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardItem\":\"Card_cardItem__3aCl1\",\"cardSpecification\":\"Card_cardSpecification__m63BW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"Learn_options__26UD_\",\"question\":\"Learn_question__3ac2w\",\"answer\":\"Learn_answer__1VH2s\",\"qOver\":\"Learn_qOver__DUiKb\",\"startOver\":\"Learn_startOver__XccY-\",\"goToPacks\":\"Learn_goToPacks__22453\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__mWkiI\",\"errorInput\":\"SuperInputText_errorInput__3yOzh\",\"error\":\"SuperInputText_error__3KmT8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1_C4x\",\"red\":\"SuperButton_red__2yMDL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1fMZO\",\"spanClassName\":\"SuperCheckbox_spanClassName__3e5Ho\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cloud\":\"Cloud_cloud__2-5lP\",\"hello\":\"Cloud_hello__Aqp83\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContents\":\"Cards_cardContents__hPMgJ\",\"paginator\":\"Cards_paginator__3DXgT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authError\":\"Login_authError__1a1YH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsCircle\":\"Loader_ldsCircle__1RXqo\"};"],"sourceRoot":""}